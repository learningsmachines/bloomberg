"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authorizer = void 0;
const server_runtime_1 = require("@remix-run/server-runtime");
class Authorizer {
    constructor(authenticator, rules = []) {
        this.authenticator = authenticator;
        this.rules = rules;
    }
    async authorize(args, { failureRedirect, raise = "response", rules = [], } = {}) {
        let user = await this.authenticator.isAuthenticated(args.request);
        if (!user) {
            if (raise === "response") {
                throw (0, server_runtime_1.json)({ message: "Not authenticated." }, { status: 401 });
            }
            if (raise === "redirect") {
                // @ts-expect-error failureRedirect is a string if raise is redirect
                throw (0, server_runtime_1.redirect)(failureRedirect);
            }
            throw new Error("Not authenticated.");
        }
        for (let rule of [...this.rules, ...rules]) {
            if (await rule({ user, ...args }))
                continue;
            // @ts-expect-error failureRedirect is a string if raise is redirect
            if (raise === "redirect")
                throw (0, server_runtime_1.redirect)(failureRedirect);
            if (raise === "response") {
                if (!rule.name)
                    throw (0, server_runtime_1.json)({ message: "Forbidden" }, { status: 403 });
                throw (0, server_runtime_1.json)({ message: `Forbidden by policy ${rule.name}` }, { status: 403 });
            }
            if (!rule.name)
                throw new Error("Forbidden.");
            throw new Error(`Forbidden by policy ${rule.name}`);
        }
        return user;
    }
}
exports.Authorizer = Authorizer;
