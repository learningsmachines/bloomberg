import { LoaderFunction } from "@remix-run/server-runtime";
import { Authenticator } from "./authenticator";
type LoaderArgs = Parameters<LoaderFunction>[0];
type AuthorizeArgs<User, Data> = Omit<RuleContext<User, Data>, "user">;
export interface RuleContext<User, Data = unknown> extends LoaderArgs {
    /**
     * The authenticated user returned by the Authenticator
     */
    user: User;
    /**
     * Extra data passed to the Authorizer from the loader or action
     */
    data?: Data;
}
/**
 * A Rule is a function that receives the same arguments of a Loader or Action
 * and the authenticated user (as configured in the Authenticator), and maybe
 * an extra data value.
 *
 * Inside a Rule function you can do any validation to verify a user to continue
 * and return a promise resolving to a boolean value.
 */
export interface RuleFunction<User, Data = unknown> {
    (context: RuleContext<User, Data>): Promise<boolean>;
}
export declare class Authorizer<User = unknown, Data = unknown> {
    private authenticator;
    private rules;
    constructor(authenticator: Authenticator<User>, rules?: RuleFunction<User, Data>[]);
    authorize(args: AuthorizeArgs<User, Data>, options?: {
        failureRedirect?: never;
        raise?: "error";
        rules?: RuleFunction<User, Data>[];
    }): Promise<User>;
    authorize(args: AuthorizeArgs<User, Data>, options?: {
        failureRedirect?: never;
        raise?: "response";
        rules?: RuleFunction<User, Data>[];
    }): Promise<User>;
    authorize(args: AuthorizeArgs<User, Data>, options: {
        failureRedirect: string;
        raise: "redirect";
        rules?: RuleFunction<User, Data>[];
    }): Promise<User>;
}
export {};
