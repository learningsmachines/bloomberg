"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniqueEnforcer = void 0;
const enforce_limit_error_1 = require("./errors/enforce-limit.error");
const enforce_unique_error_1 = require("./errors/enforce-unique.error");
/**
 * Class that can be used to enforce unique values.
 *
 * @example
 *
 * const uniqueEnforcer = new UniqueEnforcer();
 *
 * const firstEmail = uniqueEnforcer.enforce(faker.internet.email())
 *
 * // You can be sure that secondEmail will always be different than firstEmail
 * const secondEmail = uniqueEnforcer.enforce(faker.internet.email())
 */
class UniqueEnforcer {
    constructor() {
        this.store = new Set();
    }
    enforce(valueOrGenerator, options = {
        maxRetries: 50,
        maxTime: 50,
    }) {
        const { maxTime = 50, maxRetries = 50 } = options;
        let value;
        if (typeof valueOrGenerator === 'function') {
            const startTime = new Date().getTime();
            let retries = 0;
            while (true) {
                if (new Date().getTime() - startTime > maxTime || retries > maxRetries) {
                    throw new enforce_limit_error_1.EnforceLimitError();
                }
                value = valueOrGenerator();
                const stringifiedValue = JSON.stringify(value);
                if (!this.store.has(stringifiedValue)) {
                    break;
                }
                retries++;
            }
        }
        else {
            value = valueOrGenerator;
            const stringifiedValue = JSON.stringify(value);
            if (this.store.has(stringifiedValue)) {
                throw new enforce_unique_error_1.EnforceUniqueError();
            }
        }
        this.store.add(JSON.stringify(value));
        return value;
    }
    /**
     * Resets the internal store of unique values in the UniqueEnforcer instance.
     * This method allows you to start enforcing uniqueness from scratch.
     *
     * @example
     *
     * const uniqueEnforcer = new UniqueEnforcer();
     *
     * const value1 = uniqueEnforcer.enforce('value');
     *
     * uniqueEnforcer.reset();
     *
     * // There will be no error thrown because of reset.
     * const value2 = uniqueEnforcer.enforce('value');
     */
    reset() {
        this.store.clear();
    }
}
exports.UniqueEnforcer = UniqueEnforcer;
