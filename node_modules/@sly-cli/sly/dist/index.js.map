{"version":3,"sources":["../src/commands/add.ts","../src/get-config.ts","../src/logger.ts","../../site/app/schemas.ts","../src/registry.ts","../src/cache.ts","../src/transformers.ts","../src/commands/library.ts","../src/prompts.ts","../src/commands/init.ts","../src/index.ts","../src/commands/refresh.ts","../src/check-version.ts","../package.json"],"sourcesContent":["import { existsSync, promises as fs } from \"fs\"\nimport path from \"path\"\nimport { Config, getConfig } from \"~/src/get-config.js\"\nimport { logger } from \"~/src/logger.js\"\nimport { fetchTree, getLibraryIndex, getRegistryIndex } from \"~/src/registry.js\"\nimport chalk from \"chalk\"\nimport { Command } from \"commander\"\nimport { execa } from \"execa\"\nimport ora from \"ora\"\nimport prompts from \"prompts\"\nimport * as z from \"zod\"\nimport { resolveTransformers } from \"~/src/transformers.js\"\nimport { chooseLibrary, configureLibraries, initLibrary } from \"./library.js\"\nimport { confirmOrQuit, confirm } from \"../prompts.js\"\n\nfunction hasLibrary(config: Config, name: string) {\n  return config?.libraries.find((lib) => lib.name === name)\n}\n\nexport const add = new Command()\n  .name(\"add\")\n  .description(\"add code to your project\")\n  .argument(\"[library]\", \"the library to add from\")\n  .argument(\"[files...]\", \"the files to add\")\n  .option(\n    \"-d, --directory [dir], --dir [dir]\",\n    \"set output directory (override sly.json)\"\n  )\n  .option(\"-o, --overwrite\", \"overwrite existing files.\", false)\n  .hook(\"preAction\", () => {\n    // This runs before every subcommand, so this is our global state\n    const options = add.optsWithGlobals()\n\n    // Flags override env vars\n    process.env.OVERWRITE = options.overwrite ? \"true\" : \"\"\n    process.env.DIRECTORY = options.directory ?? \"\"\n  })\n  .action(async (libArg, filesArg) => {\n    let library = z.string().optional().parse(libArg)\n    const items = z.array(z.string()).default([]).parse(filesArg)\n    // they don't choose library, we ask them to choose\n    // TODO: this would be easier with XState\n    let config = await getConfig()\n    if (!library) {\n      if (!config) {\n        // they don't have a config, send them to init\n        await configureLibraries()\n        config = await getConfig()\n\n        // if they still don't have a config, something went wrong\n        if (!config) {\n          // XState fixes this\n          logger.error(`Something went wrong. Please try again.`)\n          process.exit(1)\n        }\n      }\n      // This is used in two places, candidate for a function\n      const CONFIG_LIBS = \"\\n    Configure libraries ->\"\n      library = config\n        ? await chooseLibrary([\n            ...config.libraries,\n            {\n              name: CONFIG_LIBS,\n            },\n          ])\n        : CONFIG_LIBS\n\n      if (library === CONFIG_LIBS) {\n        return configureLibraries()\n      }\n    } else {\n      // they choose library\n      // they didn't pass the outpath AND it's not in their config -> ask to configure\n      if (!process.env.DIRECTORY && (!config || !hasLibrary(config, library))) {\n        const { libraries } = await getRegistryIndex()\n        if (!libraries.find((lib) => lib.name === library)) {\n          logger.error(`Library ${library} not in registry`)\n          process.exit(1)\n        }\n\n        await initLibrary(library)\n        config = await getConfig()\n      }\n    }\n\n    if (!process.env.DIRECTORY && !config) {\n      // XState fixes this\n      logger.error(`Something went wrong. Please try again.`)\n      process.exit(1)\n    }\n\n    const registryIndex = await getLibraryIndex(library)\n\n    let selectedComponents = items\n    if (!items?.length) {\n      const { items } = await z\n        .object({\n          items: z.array(z.string()).min(1),\n        })\n        .parseAsync(\n          await prompts({\n            type: \"autocompleteMultiselect\",\n            name: \"items\",\n            message: \"Which items would you like to add?\",\n            hint: \"Space to select. A to toggle all. Enter to submit.\",\n            instructions: false,\n            choices: registryIndex.resources.map((entry) => ({\n              title: entry.name,\n              value: entry.name,\n            })),\n            min: 1,\n          })\n        )\n        .catch(() => process.exit(1))\n      selectedComponents = items\n    }\n\n    const treeSet = new Set(\n      registryIndex.resources.filter(\n        (item) => selectedComponents?.includes(item.name)\n      )\n    )\n\n    for (const item of treeSet) {\n      if (item.registryDependencies.length > 0) {\n        const deps = item.registryDependencies.map((dep) =>\n          registryIndex.resources.find((item) => item.name === dep)\n        )\n\n        for (const dep of deps) {\n          if (dep) {\n            treeSet.add(dep)\n          } else {\n            logger.error(`Dependency ${dep} not found in registry`)\n          }\n        }\n      }\n    }\n\n    const treeSetItemsThatAreNotSelected = Array.from(treeSet).filter(\n      (item) => !selectedComponents.includes(item.name)\n    )\n\n    if (treeSetItemsThatAreNotSelected.length > 0) {\n      logger.info(`The selected items depend on these other items:`)\n      for (const item of treeSetItemsThatAreNotSelected) {\n        logger.info(`- ${chalk.cyan(item.name)}`)\n      }\n    }\n\n    const payload = await fetchTree(library, Array.from(treeSet))\n\n    if (!payload.length) {\n      logger.warn(\"Selected items not found. Exiting.\")\n      process.exit(0)\n    }\n\n    await confirmOrQuit(\n      `Ready to install ${payload.length} items from ${chalk.cyan(\n        library\n      )}. Proceed?`\n    )\n\n    const libConfig = config?.libraries.find(({ name }) => name === library)\n    if (!process.env.DIRECTORY && !libConfig) {\n      // XState fixes this\n      logger.error(`Library ${library} not found in config`)\n      process.exit(1)\n    }\n\n    const transformers = libConfig\n      ? await resolveTransformers(libConfig.transformers)\n      : []\n\n    for (const item of payload) {\n      const targetDir = process.env.DIRECTORY || libConfig?.directory\n      if (!targetDir) {\n        throw new Error(\"No target directory found. This shouldn't happen.\")\n      }\n\n      if (!existsSync(targetDir)) {\n        await fs.mkdir(targetDir, { recursive: true })\n      }\n\n      const existingComponent = item.files.filter((file) =>\n        existsSync(path.resolve(targetDir, file.name))\n      )\n\n      if (existingComponent.length && !process.env.OVERWRITE) {\n        if (selectedComponents.includes(item.name)) {\n          logger.warn(\n            `Component ${item.name} already exists. Use ${chalk.green(\n              \"--overwrite\"\n            )} to overwrite.`\n          )\n          process.exit(1)\n        }\n\n        continue\n      }\n\n      // TODO: support hipster package managers\n      if (item.dependencies.length || item.devDependencies.length) {\n        const shouldInstall = await confirm(\n          [\n            `${chalk.cyan(item.name)} requires the following`,\n            item.dependencies.length && \"\\nDependencies:\",\n            ...item.dependencies.map((dep) => `- ${chalk.cyan(dep)}`),\n            item.devDependencies.length && \"\\nDev Dependencies:\",\n            ...item.devDependencies.map((dep) => `\\n- ${chalk.cyan(dep)}`),\n            \"\\nProceed?\",\n          ]\n            .filter(Boolean)\n            .join(\"\\n\")\n        )\n\n        if (shouldInstall) {\n          if (item.dependencies?.length) {\n            await execa(\"npm\", [\"install\", ...item.dependencies])\n          }\n\n          if (item.devDependencies?.length) {\n            await execa(\"npm\", [\n              \"install\",\n              \"--save-dev\",\n              ...item.devDependencies,\n            ])\n          }\n        }\n      }\n\n      const itemSpinner = ora(`  Installing ${item.name}...\\n`).start()\n\n      for (const file of item.files) {\n        const fileSpinner = ora(`    Installing ${file.name}...\\n`).start()\n\n        const output = await transformers.reduce(\n          async (content, transformer) =>\n            transformer.default(await content, item.meta),\n          Promise.resolve(file.content)\n        )\n\n        await fs.writeFile(path.resolve(targetDir, file.name), output)\n\n        fileSpinner.succeed(`    Installed ${path.join(targetDir, file.name)}`)\n      }\n      itemSpinner.succeed(`  Installed ${item.name}`)\n    }\n\n    if (libConfig?.postinstall && libConfig.postinstall.length > 0) {\n      const cmd =\n        typeof libConfig.postinstall === \"string\"\n          ? libConfig.postinstall\n          : libConfig.postinstall[0]\n      const args =\n        typeof libConfig.postinstall === \"string\"\n          ? []\n          : libConfig.postinstall.slice(1)\n\n      if (cmd) {\n        await execa(cmd, args)\n      }\n    }\n  })\n","import { promises as fs } from \"fs\"\n\nimport { cosmiconfig } from \"cosmiconfig\"\nimport * as z from \"zod\"\nimport ora from \"ora\"\nimport { logger } from \"./logger.js\"\n\n// Use singleton so we can lazy load the env vars, which might be set as flags\nlet explorer: ReturnType<typeof cosmiconfig> | null\nfunction getExplorer() {\n  // ? Do we really need cosmiconfig? We only support .json files\n  // Other options would be nice but we need to be able to write to it\n  // and other formats are prohibitively hard to write\n  if (!explorer) {\n    const paths = [\"sly.json\", \"sly/sly.json\"]\n    // TODO: submit a PR to add your config dir here\n    const directories = [\"\", \".config\", \"config\", \"other\"]\n\n    explorer = cosmiconfig(\"sly\", {\n      searchPlaces: directories.flatMap((dir) =>\n        paths.map((path) => `${dir}/${path}`)\n      ),\n      cache: Boolean(process.env.CACHE),\n    })\n  }\n  return explorer\n}\n\nexport const libraryConfigSchema = z\n  .object({\n    name: z.string(),\n    directory: z.string(),\n    postinstall: z.union([z.string().optional(), z.array(z.string())]),\n    transformers: z.array(z.string()),\n  })\n  .strict()\n\nexport type LibraryConfig = z.infer<typeof libraryConfigSchema>\n\nexport const configSchema = z\n  .object({\n    $schema: z.string().optional(),\n    libraries: z.array(libraryConfigSchema),\n  })\n  .strict()\n\nexport type Config = z.infer<typeof configSchema>\n\nexport async function getConfigFilepath() {\n  // ? Should this be an environment variable?\n  // We could set it on startup if none is provided\n\n  const configResult = await getExplorer().search()\n  if (!configResult) {\n    logger.error(`Couldn't find sly.json.`)\n    process.exit(1)\n  }\n\n  return configResult.filepath\n}\n\nexport async function getConfig(): Promise<Config | null> {\n  const configResult = await getExplorer().search()\n  if (!configResult) {\n    return null\n  }\n\n  try {\n    return configSchema.parse(configResult.config)\n  } catch (error) {\n    throw new Error(`Invalid configuration found in /sly.json.`)\n  }\n}\n\nexport async function setConfig(fn: (config: Config) => Config) {\n  const spinner = ora(`Saving sly.json settings…`).start()\n\n  const config = (await getConfig()) ?? {\n    $schema: `${\n      process.env.REGISTRY_URL || \"https://sly-cli.fly.dev\"\n    }/registry/config.json`,\n    libraries: [],\n  }\n\n  const newConfig = configSchema.parse(fn(config))\n\n  const configFile = await getExplorer().search()\n\n  await fs.writeFile(\n    configFile ? configFile.filepath : \"sly.json\",\n    JSON.stringify(newConfig, null, 2),\n    \"utf8\"\n  )\n\n  if (process.env.CACHE) {\n    // future getConfig calls will return stale data if we don't clear it\n    getExplorer().clearSearchCache()\n  }\n\n  spinner.succeed()\n}\n","import chalk from \"chalk\"\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.error(chalk.red(...args))\n  },\n  warn(...args: unknown[]) {\n    console.warn(chalk.yellow(...args))\n  },\n  info(...args: unknown[]) {\n    console.info(chalk.cyan(...args))\n  },\n  success(...args: unknown[]) {\n    console.info(chalk.green(...args))\n  },\n}\n","import { z } from \"zod\"\n\nexport const metaSchema = z.object({\n  name: z.string(),\n  source: z.string(),\n  description: z.string().optional(),\n  license: z.string(),\n})\n\nexport type Meta = z.infer<typeof metaSchema>\n\n/**\n * The response when fetching the root index\n */\nexport const registryIndexSchema = z.object({\n  version: z.string(),\n  libraries: z.array(metaSchema),\n})\n\nexport const libraryItemSchema = z.object({\n  name: z.string(),\n  dependencies: z.array(z.string()).optional().default([]),\n  devDependencies: z.array(z.string()).optional().default([]),\n  registryDependencies: z.array(z.string()).optional().default([]),\n})\n\n/**\n * The response when fetching a library index\n */\nexport const libraryIndexSchema = z.object({\n  version: z.string(),\n  meta: metaSchema,\n  resources: z.array(libraryItemSchema),\n})\n\n/**\n * The response when fetching an individual item\n */\nexport const libraryItemWithContentSchema = libraryItemSchema.extend({\n  files: z.array(\n    z.object({\n      name: z.string(),\n      content: z.string(),\n    })\n  ),\n  meta: metaSchema,\n})\n\n/**\n * Returned from the GitHub API when fetching a file\n *\n * @link https://api.github.com/repos/radix-ui/icons/contents/packages/radix-icons/icons/accessibility.svg\n * */\nexport const githubFile = z.object({\n  type: z.literal(\"file\"),\n  name: z.string(),\n  path: z.string(),\n  sha: z.string(),\n  size: z.number(),\n  url: z.string(),\n  html_url: z.string(),\n  git_url: z.string(),\n  download_url: z.string(),\n})\n","/**\n * Most of this code comes from the shadcn/ui CLI\n * @link https://github.com/shadcn/ui/blob/main/packages/cli/src/utils/registry/index.ts\n */\nimport {\n  libraryIndexSchema,\n  libraryItemWithContentSchema,\n  registryIndexSchema,\n} from \"site/app/schemas.js\"\nimport * as z from \"zod\"\n\nimport { cachified } from \"cachified\"\nimport { cache, dumpCache } from \"./cache.js\"\nimport { logger } from \"./logger.js\"\n\nconst baseUrl = process.env.REGISTRY_URL || \"https://sly-cli.fly.dev\"\n\nexport async function getRegistryIndex() {\n  try {\n    const [result] = await fetchRegistry([`index.json`])\n\n    return registryIndexSchema.parse(result)\n  } catch (error) {\n    throw new Error(`Failed to fetch the registry index`)\n  }\n}\n\nexport async function getLibraryIndex(library: string) {\n  try {\n    const [result] = await fetchRegistry([`${library}.json`])\n\n    return libraryIndexSchema.parse(result)\n  } catch (error) {\n    throw new Error(`Failed to fetch ${library} index from registry.`)\n  }\n}\n\nexport async function fetchTree(\n  library: string,\n  tree: z.infer<typeof libraryIndexSchema>[\"resources\"]\n) {\n  const result = await fetchRegistry(\n    tree.map((item) => `${library}/${item.name}.json`)\n  ).catch((error) => {\n    logger.error(error)\n    throw new Error(`Failed to fetch tree from registry.`)\n  })\n\n  return z\n    .array(libraryItemWithContentSchema)\n    .parseAsync(result)\n    .catch((error) => {\n      logger.error(error)\n      throw new Error(`Failed to parse tree from registry.`)\n    })\n}\n\nasync function fetchRegistry(paths: string[]) {\n  try {\n    const response = await Promise.all(\n      paths.map((path) =>\n        cachified({\n          // TODO: add package.json version to key\n          key: `${baseUrl}/registry/${path}`,\n          cache,\n          async getFreshValue() {\n            return fetch(`${baseUrl}/registry/${path}`).then((response) =>\n              response.json()\n            )\n          },\n        })\n      )\n    )\n\n    if (process.env.CACHE) {\n      void dumpCache()\n    }\n\n    return response\n  } catch (error) {\n    logger.error(error)\n    throw new Error(`Failed to fetch registry from ${baseUrl}.`)\n  }\n}\n","import fs from \"fs\"\nimport path from \"path\"\nimport { LRUCache } from \"lru-cache\"\nimport { lruCacheAdapter, CacheEntry } from \"cachified\"\n\nconst lru = new LRUCache<string, CacheEntry>({ max: 1000 })\n\nexport const cache = lruCacheAdapter(lru)\n\nconst CACHE_DIRECTORY =\n  process.env.CACHE_DIRECTORY || \"node_modules/.cache/@sly-cli\"\nconst CACHE_FILENAME = path.join(CACHE_DIRECTORY, \"sly.json\")\n\nexport function dumpCache() {\n  if (!fs.existsSync(CACHE_DIRECTORY)) {\n    fs.mkdirSync(CACHE_DIRECTORY, { recursive: true })\n  }\n\n  fs.writeFileSync(CACHE_FILENAME, JSON.stringify(lru.dump()))\n}\n\nexport function restoreCache() {\n  if (fs.existsSync(CACHE_FILENAME)) {\n    const existingCache = fs.readFileSync(CACHE_FILENAME)\n\n    lru.load(JSON.parse(existingCache.toString()))\n  }\n}\n\nexport function clearCache() {\n  lru.load([])\n  dumpCache()\n}\n","import path from \"path\"\nimport { existsSync } from \"fs\"\nimport { Transformer } from \"./index.js\"\nimport { logger } from \"~/src/logger.js\"\nimport { getConfigFilepath } from \"./get-config.js\"\nimport chalk from \"chalk\"\n\nexport async function resolveTransformers(transformers: string[]) {\n  const modules = await Promise.all(\n    transformers.map(async (transformer) => {\n      const configPath = await getConfigFilepath()\n      const transformerPath = path.resolve(configPath, \"..\", transformer)\n      if (!existsSync(transformerPath)) {\n        logger.error(\n          `Transformer ${transformer} does not exist relative to ${configPath}`\n        )\n        process.exit(1)\n      }\n\n      return import(transformerPath).catch((error) => {\n        logger.error(`Failed to load transformer ${transformer}.`)\n        if (error.code === \"ERR_UNKNOWN_FILE_EXTENSION\") {\n          logger.warn(\n            `Sly must be installed to your node_modules to use typescript transformers.`\n          )\n          logger.warn(chalk.bold(`npm install --save-dev @sly-cli/sly`))\n        } else {\n          logger.error(error)\n        }\n        process.exit(1)\n      })\n    })\n  )\n\n  return modules as Array<{ default: Transformer }>\n}\n","import {\n  LibraryConfig,\n  getConfig,\n  libraryConfigSchema,\n  setConfig,\n} from \"~/src/get-config.js\"\nimport { logger } from \"~/src/logger.js\"\nimport { Command } from \"commander\"\nimport chalk from \"chalk\"\nimport prompts from \"prompts\"\nimport { getRegistryIndex } from \"~/src/registry.js\"\nimport { confirmOrQuit } from \"../prompts.js\"\nimport { z } from \"zod\"\n\nexport const libraryCommand = new Command()\n  .name(\"library\")\n  .alias(\"lib\")\n  .alias(\"l\")\n  .argument(\"[name]\", \"the name of the library to add\")\n  .description(`Configure and add libraries to your project`)\n  .action(async (argName) => {\n    if (argName) {\n      const { libraries } = await getRegistryIndex()\n      const library = libraries.find((lib) => lib.name === argName)\n      if (!library) {\n        logger.error(`Library ${argName} not found`)\n        process.exit(1)\n      }\n\n      return initLibrary(library.name)\n    }\n\n    // No library name provided, show the list\n    // XState fixes this\n    const config = await getConfig()\n    const CONFIG_LIBS = \"\\n    Configure libraries ->\"\n    const choice = config\n      ? await chooseLibrary([\n          ...config.libraries,\n          {\n            name: CONFIG_LIBS,\n          },\n        ])\n      : CONFIG_LIBS\n\n    if (choice === CONFIG_LIBS) {\n      return configureLibraries()\n    }\n\n    return initLibrary(choice)\n  })\n\nexport async function configureLibraries() {\n  const existingConfig = await getConfig()\n\n  const { libraries } = await getRegistryIndex()\n\n  const answers = await z\n    .object({\n      libraries: z.array(z.string()),\n    })\n    .parseAsync(\n      await prompts([\n        {\n          type: \"multiselect\",\n          name: \"libraries\",\n          message: `Which libraries would you like to use?`,\n          choices: libraries.map((library) => ({\n            title: library.name,\n            description: library.description,\n            value: library.name,\n            selected:\n              existingConfig?.libraries.some(\n                ({ name }) => library.name === name\n              ) ?? false,\n          })),\n          min: 1,\n        },\n      ])\n    )\n    .catch(() => process.exit(1))\n\n  const newLibraries = answers.libraries.filter(\n    (name: string) =>\n      !existingConfig?.libraries.some((library) => library.name === name)\n  )\n\n  for (const name of newLibraries) {\n    await initLibrary(name)\n  }\n\n  const removedLibraries = existingConfig?.libraries.filter(\n    (library) => !answers.libraries.includes(library.name)\n  )\n\n  if (removedLibraries?.length) {\n    await confirmOrQuit(\n      `Are you sure you want to remove ${removedLibraries\n        .map((library) => chalk.cyan(library.name))\n        .join(\", \")}?`\n    )\n\n    await setConfig((config) => {\n      return {\n        ...config,\n        libraries: config.libraries.filter(\n          ({ name }) =>\n            !removedLibraries.some((library) => library.name === name)\n        ),\n      }\n    })\n  }\n}\n\nexport async function chooseLibrary(\n  libraries: { name: LibraryConfig[\"name\"] }[]\n) {\n  const { library } = await z\n    .object({\n      library: z.string(),\n    })\n    .parseAsync(\n      await prompts({\n        type: \"select\",\n        name: \"library\",\n        message: `Which library would you like to use?`,\n        choices: libraries.map((library) => ({\n          title: library.name,\n          value: library.name,\n        })),\n      })\n    )\n    .catch(() => process.exit(1))\n\n  return library\n}\n\nexport async function initLibrary(name: string) {\n  const config = await getConfig()\n\n  const existingConfig: LibraryConfig = config?.libraries.find(\n    (library) => library.name === name\n  ) ?? {\n    name,\n    directory: \"./components\",\n    postinstall: [],\n    transformers: [],\n  }\n\n  const answers = await z\n    .object({\n      directory: z.string(),\n      postinstall: z\n        .string()\n        .transform((value) => (value.trim() ? value.trim().split(\" \") : [])),\n    })\n    .parseAsync(\n      await prompts([\n        {\n          type: \"text\",\n          name: \"directory\",\n          message: `Pick a directory for ${chalk.cyan(name)}`,\n          initial: existingConfig.directory,\n        },\n        {\n          type: \"text\",\n          name: \"postinstall\",\n          message: `Run a command after installing ${chalk.cyan(name)}?`,\n          initial: Array.isArray(existingConfig.postinstall)\n            ? existingConfig.postinstall.join(\" \")\n            : existingConfig.postinstall,\n        },\n      ])\n    )\n    .catch(() => process.exit(1))\n\n  const newSettings = libraryConfigSchema.parse({\n    name,\n    directory: answers.directory,\n    postinstall: answers.postinstall,\n    transformers: existingConfig.transformers,\n  })\n\n  await confirmOrQuit(`Save settings to ${chalk.cyan(\"sly.json\")}?`)\n\n  await setConfig((config) => {\n    const existingLibraryConfig = config.libraries.find(\n      (library) => library.name === name\n    )\n\n    if (existingLibraryConfig) {\n      existingLibraryConfig.directory = newSettings.directory\n      existingLibraryConfig.postinstall = newSettings.postinstall\n    } else {\n      config.libraries.push(newSettings)\n    }\n\n    return config\n  })\n}\n","import prompts from \"prompts\"\n\nexport async function confirmOrQuit(message: string) {\n  const proceed = await confirm(message)\n\n  if (!proceed) {\n    process.exit(0)\n  }\n}\n\nexport async function confirm(message: string) {\n  if (process.env.YES) return true\n\n  const { proceed } = await prompts({\n    type: \"confirm\",\n    name: \"proceed\",\n    message,\n    initial: true,\n  })\n\n  return Boolean(proceed)\n}\n","import { logger } from \"~/src/logger.js\"\nimport { Command } from \"commander\"\nimport chalk from \"chalk\"\nimport { configureLibraries } from \"./library.js\"\n\nexport const init = new Command()\n  .name(\"init\")\n  .description(\"initialize your project and choose libraries\")\n  .action(async () => {\n    await configureLibraries()\n\n    logger.info(`${chalk.green(\"Success!\")} Project initialization completed.`)\n  })\n","#!/usr/bin/env node\n\nimport { add } from \"~/src/commands/add.js\"\nimport { init } from \"~/src/commands/init.js\"\nimport { Command } from \"commander\"\nimport { restoreCache } from \"./cache.js\"\nimport { refresh } from \"./commands/refresh.js\"\nimport { libraryCommand } from \"./commands/library.js\"\nimport { checkVersion } from \"./check-version.js\"\n\nprocess.on(\"SIGINT\", () => process.exit(0))\nprocess.on(\"SIGTERM\", () => process.exit(0))\n\nawait checkVersion()\nvoid restoreCache()\n\nconst program = new Command()\n  .name(\"sly\")\n  .description(\"add components, icons, and utilities as code, not dependencies\")\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\n  // flags with --no are inverted, so this is yes-cache by default\n  .option(\"--no-cache\", \"disable caching.\", true)\n  .version(\"1.0.0\", \"-v, --version\", \"display the version number\")\n  .hook(\"preAction\", () => {\n    // This runs before every command, so this is our global state\n    const options = program.optsWithGlobals()\n\n    // Flags override env vars\n    process.env.YES = options.yes ? \"true\" : \"\"\n    process.env.CACHE = options.cache ? \"true\" : \"\"\n  })\n\nprogram\n  .addCommand(init)\n  .addCommand(add)\n  .addCommand(refresh)\n  .addCommand(libraryCommand)\n\nprogram.parse()\n\n/**\n * These are imported by the JSDoc in the transformers\n */\n\nexport type Meta = {\n  name: string\n  source: string\n  description?: string\n  license: string\n}\n\nexport type Transformer = (\n  input: string,\n  meta: Meta\n) => Promise<string> | string\n","import { logger } from \"~/src/logger.js\"\nimport chalk from \"chalk\"\nimport { Command } from \"commander\"\nimport { clearCache } from \"../cache.js\"\n\nexport const refresh = new Command()\n  .name(\"refresh\")\n  .description(\"clear the cache and refresh the library index\")\n  .action(() => {\n    clearCache()\n\n    logger.info(`${chalk.green(\"Success!\")} Cache cleared`)\n\n    process.exit(1)\n  })\n","import { compareVersions } from \"compare-versions\"\nimport { getRegistryIndex } from \"./registry.js\"\nimport packageJson from \"../package.json\"\nimport { logger } from \"./logger.js\"\nimport chalk from \"chalk\"\n\nexport function checkVersion() {\n  return getRegistryIndex().then(({ version }) => {\n    const comparison = compareVersions(version, packageJson.version)\n    if (comparison === 1) {\n      logger.warn(`Update available ${packageJson.version} -> ${version}.`)\n      logger.warn(\n        `Run ${chalk.bold(\"npm i --save-dev @sly-cli/sly\")} to update.`\n      )\n    }\n  })\n}\n","{\n  \"name\": \"@sly-cli/sly\",\n  \"version\": \"1.4.10\",\n  \"description\": \"Sly is a CLI tool to add components, icons, and utilities as code, not dependencies.\",\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": \"./dist/index.js\",\n    \"./ts-loader\": \"./ts-loader.js\"\n  },\n  \"bin\": {\n    \"sly\": \"start.sh\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"license\": \"MIT\",\n  \"author\": \"Jacob Paris (https://twitter.com/jacobmparis)\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/jacobparis-insiders/sly.git\",\n    \"directory\": \"cli\"\n  },\n  \"files\": [\n    \"dist\",\n    \"ts-loader.js\"\n  ],\n  \"keywords\": [\n    \"jacobparis\"\n  ],\n  \"scripts\": {\n    \"dev\": \"tsup --watch\",\n    \"build\": \"tsup\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"clean\": \"rimraf dist\",\n    \"start:dev\": \"REGISTRY_URL=http://localhost:3000/registry node dist/index.js\",\n    \"start\": \"node dist/index.js\",\n    \"release\": \"changeset version\",\n    \"pub\": \"npm run build && npm publish --access public\",\n    \"test\": \"vitest run\"\n  },\n  \"dependencies\": {\n    \"cachified\": \"^3.5.4\",\n    \"chalk\": \"^5.3.0\",\n    \"commander\": \"^11.0.0\",\n    \"compare-versions\": \"^6.0.0\",\n    \"cosmiconfig\": \"^8.2.0\",\n    \"execa\": \"^7.1.1\",\n    \"lru-cache\": \"^10.0.0\",\n    \"ora\": \"^6.3.1\",\n    \"prompts\": \"^2.4.2\",\n    \"zod\": \"^3.21.4\"\n  },\n  \"devDependencies\": {\n    \"@types/prompts\": \"^2.4.4\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.1.0\",\n    \"@typescript-eslint/parser\": \"^6.1.0\",\n    \"esbuild\": \"^0.18.15\",\n    \"eslint\": \"^8.45.0\",\n    \"eslint-plugin-no-template-curly-in-string-fix\": \"^1.0.4\",\n    \"prettier\": \"^3.0.0\",\n    \"rimraf\": \"^5.0.1\",\n    \"tsup\": \"^7.1.0\",\n    \"typescript\": \"^5.1.6\"\n  },\n  \"types\": \"./dist/index.d.ts\",\n  \"bugs\": {\n    \"url\": \"https://github.com/jacobparis-insiders/sly/issues\"\n  },\n  \"homepage\": \"https://github.com/jacobparis-insiders/sly#readme\",\n  \"main\": \"index.js\"\n}\n"],"mappings":"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","names":["existsSync","fs","path","path","z","z","fs","path","response","chalk","Command","ora","prompts","z","path","chalk","path","chalk","prompts","z","prompts","chalk","library","config","Command","items","prompts","item","chalk","existsSync","fs","path","ora","Command","chalk","Command","chalk","Command","chalk","Command","Command","chalk","chalk","Command"]}