import { Cache, CacheEntry } from './common';
export interface LRUishCache extends Omit<Cache, 'set'> {
    set(key: string, value: CacheEntry<unknown>, options?: {
        ttl?: number;
        start?: number;
    }): void;
}
export declare function lruCacheAdapter(lruCache: LRUishCache): Cache;
interface Redis3Multi {
    set(key: string, value: string): Redis3Multi;
    expireat(key: string, timestamp: number): Redis3Multi;
    exec(cb: (err: Error | null, replies: (number | 'OK')[]) => void): unknown;
}
export interface Redis3LikeCache {
    name?: string;
    set(key: string, value: string, cb: (err: Error | null, reply: 'OK') => void): unknown;
    get(key: string, cb?: (err: Error | null, reply: string | null) => void): unknown;
    del(key: string, cb?: (err: Error | null, reply: number) => void): unknown;
    multi(): Redis3Multi;
}
export declare function redis3CacheAdapter(redisCache: Redis3LikeCache): Cache;
export interface RedisLikeCache {
    name?: string;
    set(key: string, value: string, options?: {
        EXAT: number;
    }): Promise<string | null>;
    get(key: string): Promise<string | null>;
    del(key: string): Promise<unknown>;
}
export declare function redisCacheAdapter(redisCache: RedisLikeCache): Cache;
export {};
