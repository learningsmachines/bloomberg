{"version":3,"file":"websocket.js","sources":["../../../src/anr/websocket.ts"],"sourcesContent":["/* eslint-disable no-bitwise */\n/**\n * A simple WebSocket client implementation copied from Rome before being modified for our use:\n * https://github.com/jeremyBanks/rome/tree/b034dd22d5f024f87c50eef2872e22b3ad48973a/packages/%40romejs/codec-websocket\n *\n * Original license:\n *\n * MIT License\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport * as crypto from 'crypto';\nimport { EventEmitter } from 'events';\nimport * as http from 'http';\nimport type { Socket } from 'net';\nimport * as url from 'url';\n\ntype BuildFrameOpts = {\n  opcode: number;\n  fin: boolean;\n  data: Buffer;\n};\n\ntype Frame = {\n  fin: boolean;\n  opcode: number;\n  mask: undefined | Buffer;\n  payload: Buffer;\n  payloadLength: number;\n};\n\nconst OPCODES = {\n  CONTINUATION: 0,\n  TEXT: 1,\n  BINARY: 2,\n  TERMINATE: 8,\n  PING: 9,\n  PONG: 10,\n};\n\nconst GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\n\nfunction isCompleteFrame(frame: Frame): boolean {\n  return Buffer.byteLength(frame.payload) >= frame.payloadLength;\n}\n\nfunction unmaskPayload(payload: Buffer, mask: undefined | Buffer, offset: number): Buffer {\n  if (mask === undefined) {\n    return payload;\n  }\n\n  for (let i = 0; i < payload.length; i++) {\n    payload[i] ^= mask[(offset + i) & 3];\n  }\n\n  return payload;\n}\n\nfunction buildFrame(opts: BuildFrameOpts): Buffer {\n  const { opcode, fin, data } = opts;\n\n  let offset = 6;\n  let dataLength = data.length;\n\n  if (dataLength >= 65_536) {\n    offset += 8;\n    dataLength = 127;\n  } else if (dataLength > 125) {\n    offset += 2;\n    dataLength = 126;\n  }\n\n  const head = Buffer.allocUnsafe(offset);\n\n  head[0] = fin ? opcode | 128 : opcode;\n  head[1] = dataLength;\n\n  if (dataLength === 126) {\n    head.writeUInt16BE(data.length, 2);\n  } else if (dataLength === 127) {\n    head.writeUInt32BE(0, 2);\n    head.writeUInt32BE(data.length, 6);\n  }\n\n  const mask = crypto.randomBytes(4);\n  head[1] |= 128;\n  head[offset - 4] = mask[0];\n  head[offset - 3] = mask[1];\n  head[offset - 2] = mask[2];\n  head[offset - 1] = mask[3];\n\n  const masked = Buffer.alloc(dataLength);\n  for (let i = 0; i < dataLength; ++i) {\n    masked[i] = data[i] ^ mask[i & 3];\n  }\n\n  return Buffer.concat([head, masked]);\n}\n\nfunction parseFrame(buffer: Buffer): Frame {\n  const firstByte = buffer.readUInt8(0);\n  const isFinalFrame: boolean = Boolean((firstByte >>> 7) & 1);\n  const opcode: number = firstByte & 15;\n\n  const secondByte: number = buffer.readUInt8(1);\n  const isMasked: boolean = Boolean((secondByte >>> 7) & 1);\n\n  // Keep track of our current position as we advance through the buffer\n  let currentOffset = 2;\n  let payloadLength = secondByte & 127;\n  if (payloadLength > 125) {\n    if (payloadLength === 126) {\n      payloadLength = buffer.readUInt16BE(currentOffset);\n      currentOffset += 2;\n    } else if (payloadLength === 127) {\n      const leftPart = buffer.readUInt32BE(currentOffset);\n      currentOffset += 4;\n\n      // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n\n      // if payload length is greater than this number.\n      if (leftPart >= Number.MAX_SAFE_INTEGER) {\n        throw new Error('Unsupported WebSocket frame: payload length > 2^53 - 1');\n      }\n\n      const rightPart = buffer.readUInt32BE(currentOffset);\n      currentOffset += 4;\n\n      payloadLength = leftPart * Math.pow(2, 32) + rightPart;\n    } else {\n      throw new Error('Unknown payload length');\n    }\n  }\n\n  // Get the masking key if one exists\n  let mask;\n  if (isMasked) {\n    mask = buffer.slice(currentOffset, currentOffset + 4);\n    currentOffset += 4;\n  }\n\n  const payload = unmaskPayload(buffer.slice(currentOffset), mask, 0);\n\n  return {\n    fin: isFinalFrame,\n    opcode,\n    mask,\n    payload,\n    payloadLength,\n  };\n}\n\nfunction createKey(key: string): string {\n  return crypto.createHash('sha1').update(`${key}${GUID}`).digest('base64');\n}\n\nclass WebSocketInterface extends EventEmitter {\n  private _alive: boolean;\n  private _incompleteFrame: undefined | Frame;\n  private _unfinishedFrame: undefined | Frame;\n  private _socket: Socket;\n\n  public constructor(socket: Socket) {\n    super();\n    // When a frame is set here then any additional continuation frames payloads will be appended\n    this._unfinishedFrame = undefined;\n\n    // When a frame is set here, all additional chunks will be appended until we reach the correct payloadLength\n    this._incompleteFrame = undefined;\n\n    this._socket = socket;\n    this._alive = true;\n\n    socket.on('data', buff => {\n      this._addBuffer(buff);\n    });\n\n    socket.on('error', (err: NodeJS.ErrnoException) => {\n      if (err.code === 'ECONNRESET') {\n        this.emit('close');\n      } else {\n        this.emit('error');\n      }\n    });\n\n    socket.on('close', () => {\n      this.end();\n    });\n  }\n\n  public end(): void {\n    if (!this._alive) {\n      return;\n    }\n\n    this._alive = false;\n    this.emit('close');\n    this._socket.end();\n  }\n\n  public send(buff: string): void {\n    this._sendFrame({\n      opcode: OPCODES.TEXT,\n      fin: true,\n      data: Buffer.from(buff),\n    });\n  }\n\n  private _sendFrame(frameOpts: BuildFrameOpts): void {\n    this._socket.write(buildFrame(frameOpts));\n  }\n\n  private _completeFrame(frame: Frame): void {\n    // If we have an unfinished frame then only allow continuations\n    const { _unfinishedFrame: unfinishedFrame } = this;\n    if (unfinishedFrame !== undefined) {\n      if (frame.opcode === OPCODES.CONTINUATION) {\n        unfinishedFrame.payload = Buffer.concat([\n          unfinishedFrame.payload,\n          unmaskPayload(frame.payload, unfinishedFrame.mask, unfinishedFrame.payload.length),\n        ]);\n\n        if (frame.fin) {\n          this._unfinishedFrame = undefined;\n          this._completeFrame(unfinishedFrame);\n        }\n        return;\n      } else {\n        // Silently ignore the previous frame...\n        this._unfinishedFrame = undefined;\n      }\n    }\n\n    if (frame.fin) {\n      if (frame.opcode === OPCODES.PING) {\n        this._sendFrame({\n          opcode: OPCODES.PONG,\n          fin: true,\n          data: frame.payload,\n        });\n      } else {\n        // Trim off any excess payload\n        let excess;\n        if (frame.payload.length > frame.payloadLength) {\n          excess = frame.payload.slice(frame.payloadLength);\n          frame.payload = frame.payload.slice(0, frame.payloadLength);\n        }\n\n        this.emit('message', frame.payload);\n\n        if (excess !== undefined) {\n          this._addBuffer(excess);\n        }\n      }\n    } else {\n      this._unfinishedFrame = frame;\n    }\n  }\n\n  private _addBufferToIncompleteFrame(incompleteFrame: Frame, buff: Buffer): void {\n    incompleteFrame.payload = Buffer.concat([\n      incompleteFrame.payload,\n      unmaskPayload(buff, incompleteFrame.mask, incompleteFrame.payload.length),\n    ]);\n\n    if (isCompleteFrame(incompleteFrame)) {\n      this._incompleteFrame = undefined;\n      this._completeFrame(incompleteFrame);\n    }\n  }\n\n  private _addBuffer(buff: Buffer): void {\n    // Check if we're still waiting for the rest of a payload\n    const { _incompleteFrame: incompleteFrame } = this;\n    if (incompleteFrame !== undefined) {\n      this._addBufferToIncompleteFrame(incompleteFrame, buff);\n      return;\n    }\n\n    // There needs to be atleast two values in the buffer for us to parse\n    // a frame from it.\n    // See: https://github.com/getsentry/sentry-javascript/issues/9307\n    if (buff.length <= 1) {\n      return;\n    }\n\n    const frame = parseFrame(buff);\n\n    if (isCompleteFrame(frame)) {\n      // Frame has been completed!\n      this._completeFrame(frame);\n    } else {\n      this._incompleteFrame = frame;\n    }\n  }\n}\n\n/**\n * Creates a WebSocket client\n */\nexport async function createWebSocketClient(rawUrl: string): Promise<WebSocketInterface> {\n  const parts = url.parse(rawUrl);\n\n  return new Promise((resolve, reject) => {\n    const key = crypto.randomBytes(16).toString('base64');\n    const digest = createKey(key);\n\n    const req = http.request({\n      hostname: parts.hostname,\n      port: parts.port,\n      path: parts.path,\n      method: 'GET',\n      headers: {\n        Connection: 'Upgrade',\n        Upgrade: 'websocket',\n        'Sec-WebSocket-Key': key,\n        'Sec-WebSocket-Version': '13',\n      },\n    });\n\n    req.on('response', (res: http.IncomingMessage) => {\n      if (res.statusCode && res.statusCode >= 400) {\n        process.stderr.write(`Unexpected HTTP code: ${res.statusCode}\\n`);\n        res.pipe(process.stderr);\n      } else {\n        res.pipe(process.stderr);\n      }\n    });\n\n    req.on('upgrade', (res: http.IncomingMessage, socket: Socket) => {\n      if (res.headers['sec-websocket-accept'] !== digest) {\n        socket.end();\n        reject(new Error(`Digest mismatch ${digest} !== ${res.headers['sec-websocket-accept']}`));\n        return;\n      }\n\n      const client = new WebSocketInterface(socket);\n      resolve(client);\n    });\n\n    req.on('error', err => {\n      reject(err);\n    });\n\n    req.end();\n  });\n}\n"],"names":["EventEmitter"],"mappings":"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"}