{"version":3,"file":"debugger.js","sources":["../../../src/anr/debugger.ts"],"sourcesContent":["import type { StackFrame } from '@sentry/types';\nimport { createDebugPauseMessageHandler } from '@sentry/utils';\nimport type { Debugger } from 'inspector';\n\nimport { getModuleFromFilename } from '../module';\nimport { createWebSocketClient } from './websocket';\n\n// The only messages we care about\ntype DebugMessage =\n  | {\n      method: 'Debugger.scriptParsed';\n      params: Debugger.ScriptParsedEventDataType;\n    }\n  | { method: 'Debugger.paused'; params: Debugger.PausedEventDataType };\n\n/**\n * Wraps a websocket connection with the basic logic of the Node debugger protocol.\n * @param url The URL to connect to\n * @param onMessage A callback that will be called with each return message from the debugger\n * @returns A function that can be used to send commands to the debugger\n */\nasync function webSocketDebugger(\n  url: string,\n  onMessage: (message: DebugMessage) => void,\n): Promise<(method: string) => void> {\n  let id = 0;\n  const webSocket = await createWebSocketClient(url);\n\n  webSocket.on('message', (data: Buffer) => {\n    const message = JSON.parse(data.toString()) as DebugMessage;\n    onMessage(message);\n  });\n\n  return (method: string) => {\n    webSocket.send(JSON.stringify({ id: id++, method }));\n  };\n}\n\n/**\n * Captures stack traces from the Node debugger.\n * @param url The URL to connect to\n * @param callback A callback that will be called with the stack frames\n * @returns A function that triggers the debugger to pause and capture a stack trace\n */\nexport async function captureStackTrace(url: string, callback: (frames: StackFrame[]) => void): Promise<() => void> {\n  const sendCommand: (method: string) => void = await webSocketDebugger(\n    url,\n    createDebugPauseMessageHandler(cmd => sendCommand(cmd), getModuleFromFilename, callback),\n  );\n\n  return () => {\n    sendCommand('Debugger.enable');\n    sendCommand('Debugger.pause');\n  };\n}\n"],"names":[],"mappings":";;;;AAOA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA,eAAA,iBAAA;AACA,EAAA,GAAA;AACA,EAAA,SAAA;AACA,EAAA;AACA,EAAA,IAAA,EAAA,GAAA,CAAA,CAAA;AACA,EAAA,MAAA,SAAA,GAAA,MAAA,qBAAA,CAAA,GAAA,CAAA,CAAA;AACA;AACA,EAAA,SAAA,CAAA,EAAA,CAAA,SAAA,EAAA,CAAA,IAAA,KAAA;AACA,IAAA,MAAA,OAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,QAAA,EAAA,CAAA,EAAA;AACA,IAAA,SAAA,CAAA,OAAA,CAAA,CAAA;AACA,GAAA,CAAA,CAAA;AACA;AACA,EAAA,OAAA,CAAA,MAAA,KAAA;AACA,IAAA,SAAA,CAAA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA;AACA,GAAA,CAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAA,iBAAA,CAAA,GAAA,EAAA,QAAA,EAAA;AACA,EAAA,MAAA,WAAA,GAAA,MAAA,iBAAA;AACA,IAAA,GAAA;AACA,IAAA,8BAAA,CAAA,GAAA,IAAA,WAAA,CAAA,GAAA,CAAA,EAAA,qBAAA,EAAA,QAAA,CAAA;AACA,GAAA,CAAA;AACA;AACA,EAAA,OAAA,MAAA;AACA,IAAA,WAAA,CAAA,iBAAA,CAAA,CAAA;AACA,IAAA,WAAA,CAAA,gBAAA,CAAA,CAAA;AACA,GAAA,CAAA;AACA;;;;"}