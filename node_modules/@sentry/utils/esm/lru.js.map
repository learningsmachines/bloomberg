{"version":3,"file":"lru.js","sources":["../../src/lru.ts"],"sourcesContent":["/** A simple Least Recently Used map */\nexport class LRUMap<K, V> {\n  private readonly _cache: Map<K, V>;\n\n  public constructor(private readonly _maxSize: number) {\n    this._cache = new Map<K, V>();\n  }\n\n  /** Get the current size of the cache */\n  public get size(): number {\n    return this._cache.size;\n  }\n\n  /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n  public get(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value === undefined) {\n      return undefined;\n    }\n    // Remove and re-insert to update the order\n    this._cache.delete(key);\n    this._cache.set(key, value);\n    return value;\n  }\n\n  /** Insert an entry and evict an older entry if we've reached maxSize */\n  public set(key: K, value: V): void {\n    if (this._cache.size >= this._maxSize) {\n      // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  /** Remove an entry and return the entry if it was in the cache */\n  public remove(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value) {\n      this._cache.delete(key);\n    }\n    return value;\n  }\n\n  /** Clear all entries */\n  public clear(): void {\n    this._cache.clear();\n  }\n\n  /** Get all the keys */\n  public keys(): Array<K> {\n    return Array.from(this._cache.keys());\n  }\n\n  /** Get all the values */\n  public values(): Array<V> {\n    const values: V[] = [];\n    this._cache.forEach(value => values.push(value));\n    return values;\n  }\n}\n"],"names":[],"mappings":"AAAA;AACA,MAAA,MAAA,CAAA;;AAGA,GAAA,WAAA,GAAA,QAAA,EAAA,CAAA,IAAA,CAAA,QAAA,GAAA,QAAA,CAAA;AACA,IAAA,IAAA,CAAA,MAAA,GAAA,IAAA,GAAA,EAAA,CAAA;AACA,GAAA;AACA;AACA;AACA,GAAA,IAAA,IAAA,GAAA;AACA,IAAA,OAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA;AACA,GAAA;AACA;AACA;AACA,GAAA,GAAA,CAAA,GAAA,EAAA;AACA,IAAA,MAAA,KAAA,GAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,IAAA,IAAA,KAAA,KAAA,SAAA,EAAA;AACA,MAAA,OAAA,SAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA;AACA,IAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,GAAA,EAAA,KAAA,CAAA,CAAA;AACA,IAAA,OAAA,KAAA,CAAA;AACA,GAAA;AACA;AACA;AACA,GAAA,GAAA,CAAA,GAAA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,IAAA,CAAA,MAAA,CAAA,IAAA,IAAA,IAAA,CAAA,QAAA,EAAA;AACA;AACA,MAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,KAAA,CAAA,CAAA;AACA,KAAA;AACA,IAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,GAAA,EAAA,KAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA;AACA,GAAA,MAAA,CAAA,GAAA,EAAA;AACA,IAAA,MAAA,KAAA,GAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,IAAA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA;AACA,KAAA;AACA,IAAA,OAAA,KAAA,CAAA;AACA,GAAA;AACA;AACA;AACA,GAAA,KAAA,GAAA;AACA,IAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;AACA,GAAA;AACA;AACA;AACA,GAAA,IAAA,GAAA;AACA,IAAA,OAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA;AACA,GAAA,MAAA,GAAA;AACA,IAAA,MAAA,MAAA,GAAA,EAAA,CAAA;AACA,IAAA,IAAA,CAAA,MAAA,CAAA,OAAA,CAAA,KAAA,IAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA,IAAA,OAAA,MAAA,CAAA;AACA,GAAA;AACA;;;;"}