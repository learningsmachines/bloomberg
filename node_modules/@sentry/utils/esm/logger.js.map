{"version":3,"file":"logger.js","sources":["../../src/logger.ts"],"sourcesContent":["import { GLOBAL_OBJ } from './worldwide';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'] as const;\nexport type ConsoleLevel = (typeof CONSOLE_LEVELS)[number];\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<ConsoleLevel, LoggerMethod>;\n\n/** This may be mutated by the console instrumentation. */\nexport const originalConsoleMethods: {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key in ConsoleLevel]?: (...args: any[]) => void;\n} = {};\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n  isEnabled(): boolean;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = GLOBAL_OBJ.console as Console;\n  const wrappedFuncs: Partial<LoggerConsoleMethods> = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) as ConsoleLevel[];\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level] as LoggerMethod;\n    wrappedFuncs[level] = console[level] as LoggerMethod | undefined;\n    console[level] = originalConsoleMethod;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] as LoggerMethod;\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n    isEnabled: () => enabled,\n  };\n\n  if (__DEBUG_BUILD__) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\nexport const logger = makeLogger();\n"],"names":[],"mappings":";;AAEA;AACA,MAAA,MAAA,GAAA,gBAAA,CAAA;AACA;AACA,MAAA,cAAA,GAAA,CAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,EAAA,QAAA,EAAA,OAAA,CAAA,EAAA;;AAMA;AACA,MAAA,sBAAA;;AAGA,GAAA,GAAA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,cAAA,CAAA,QAAA,EAAA;AACA,EAAA,IAAA,EAAA,SAAA,IAAA,UAAA,CAAA,EAAA;AACA,IAAA,OAAA,QAAA,EAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,MAAA,OAAA,GAAA,UAAA,CAAA,OAAA,EAAA;AACA,EAAA,MAAA,YAAA,GAAA,EAAA,CAAA;AACA;AACA,EAAA,MAAA,aAAA,GAAA,MAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,EAAA;AACA;AACA;AACA,EAAA,aAAA,CAAA,OAAA,CAAA,KAAA,IAAA;AACA,IAAA,MAAA,qBAAA,GAAA,sBAAA,CAAA,KAAA,CAAA,EAAA;AACA,IAAA,YAAA,CAAA,KAAA,CAAA,GAAA,OAAA,CAAA,KAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,KAAA,CAAA,GAAA,qBAAA,CAAA;AACA,GAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA;AACA,IAAA,OAAA,QAAA,EAAA,CAAA;AACA,GAAA,SAAA;AACA;AACA,IAAA,aAAA,CAAA,OAAA,CAAA,KAAA,IAAA;AACA,MAAA,OAAA,CAAA,KAAA,CAAA,GAAA,YAAA,CAAA,KAAA,CAAA,EAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA;AACA,CAAA;AACA;AACA,SAAA,UAAA,GAAA;AACA,EAAA,IAAA,OAAA,GAAA,KAAA,CAAA;AACA,EAAA,MAAA,MAAA,GAAA;AACA,IAAA,MAAA,EAAA,MAAA;AACA,MAAA,OAAA,GAAA,IAAA,CAAA;AACA,KAAA;AACA,IAAA,OAAA,EAAA,MAAA;AACA,MAAA,OAAA,GAAA,KAAA,CAAA;AACA,KAAA;AACA,IAAA,SAAA,EAAA,MAAA,OAAA;AACA,GAAA,CAAA;AACA;AACA,EAAA,KAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,GAAA;AACA,IAAA,cAAA,CAAA,OAAA,CAAA,IAAA,IAAA;AACA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,KAAA;AACA,QAAA,IAAA,OAAA,EAAA;AACA,UAAA,cAAA,CAAA,MAAA;AACA,YAAA,UAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,EAAA,CAAA,EAAA,GAAA,IAAA,CAAA,CAAA;AACA,WAAA,CAAA,CAAA;AACA,SAAA;AACA,OAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA,MAAA;AACA,IAAA,cAAA,CAAA,OAAA,CAAA,IAAA,IAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,GAAA,MAAA,SAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,OAAA,MAAA,EAAA;AACA,CAAA;AACA;AACA,MAAA,MAAA,GAAA,UAAA;;;;"}