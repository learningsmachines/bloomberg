import type { RemixOptions } from './utils/remixOptions';
export { addGlobalEventProcessor, addBreadcrumb, captureCheckIn, withMonitor, captureException, captureEvent, captureMessage, configureScope, createTransport, extractTraceparentData, getActiveTransaction, getHubFromCarrier, getCurrentHub, Hub, makeMain, Scope, startTransaction, SDK_VERSION, setContext, setExtra, setExtras, setTag, setTags, setUser, spanStatusfromHttpCode, trace, withScope, autoDiscoverNodePerformanceMonitoringIntegrations, makeNodeTransport, defaultIntegrations, defaultStackParser, lastEventId, flush, close, getSentryRelease, addRequestDataToEvent, DEFAULT_USER_INCLUDES, extractRequestData, deepReadDirSync, Integrations, Handlers, } from '@sentry/node';
export * from '@sentry/node';
export { captureRemixServerException } from './utils/instrumentServer';
export { ErrorBoundary, withErrorBoundary } from '@sentry/react';
export { remixRouterInstrumentation, withSentry } from './client/performance';
export { captureRemixErrorBoundaryError } from './client/errors';
export { wrapExpressCreateRequestHandler } from './utils/serverAdapters/express';
export type { SentryMetaArgs } from './utils/types';
/** Initializes Sentry Remix SDK on Node. */
export declare function init(options: RemixOptions): void;
//# sourceMappingURL=index.server.d.ts.map