{"version":3,"file":"index.server.js","sources":["../../src/index.server.ts"],"sourcesContent":["/* eslint-disable import/export */\nimport type { NodeOptions } from '@sentry/node';\nimport { configureScope, getCurrentHub, init as nodeInit } from '@sentry/node';\nimport { logger } from '@sentry/utils';\n\nimport { instrumentServer } from './utils/instrumentServer';\nimport { buildMetadata } from './utils/metadata';\nimport type { RemixOptions } from './utils/remixOptions';\n\n// We need to explicitly export @sentry/node as they end up under `default` in ESM builds\n// See: https://github.com/getsentry/sentry-javascript/issues/8474\nexport {\n  addGlobalEventProcessor,\n  addBreadcrumb,\n  captureCheckIn,\n  withMonitor,\n  captureException,\n  captureEvent,\n  captureMessage,\n  configureScope,\n  createTransport,\n  extractTraceparentData,\n  getActiveTransaction,\n  getHubFromCarrier,\n  getCurrentHub,\n  Hub,\n  makeMain,\n  Scope,\n  startTransaction,\n  SDK_VERSION,\n  setContext,\n  setExtra,\n  setExtras,\n  setTag,\n  setTags,\n  setUser,\n  spanStatusfromHttpCode,\n  trace,\n  withScope,\n  autoDiscoverNodePerformanceMonitoringIntegrations,\n  makeNodeTransport,\n  defaultIntegrations,\n  defaultStackParser,\n  lastEventId,\n  flush,\n  close,\n  getSentryRelease,\n  addRequestDataToEvent,\n  DEFAULT_USER_INCLUDES,\n  extractRequestData,\n  deepReadDirSync,\n  Integrations,\n  Handlers,\n} from '@sentry/node';\n\n// Keeping the `*` exports for backwards compatibility and types\nexport * from '@sentry/node';\n\nexport { captureRemixServerException } from './utils/instrumentServer';\nexport { ErrorBoundary, withErrorBoundary } from '@sentry/react';\nexport { remixRouterInstrumentation, withSentry } from './client/performance';\nexport { captureRemixErrorBoundaryError } from './client/errors';\nexport { wrapExpressCreateRequestHandler } from './utils/serverAdapters/express';\n\nexport type { SentryMetaArgs } from './utils/types';\n\nfunction sdkAlreadyInitialized(): boolean {\n  const hub = getCurrentHub();\n  return !!hub.getClient();\n}\n\n/** Initializes Sentry Remix SDK on Node. */\nexport function init(options: RemixOptions): void {\n  buildMetadata(options, ['remix', 'node']);\n\n  if (sdkAlreadyInitialized()) {\n    __DEBUG_BUILD__ && logger.log('SDK already initialized');\n\n    return;\n  }\n\n  instrumentServer();\n\n  nodeInit(options as NodeOptions);\n\n  configureScope(scope => {\n    scope.setTag('runtime', 'node');\n  });\n}\n"],"names":["nodeInit"],"mappings":";;;;;;;;;;;;AAkEA,SAAA,qBAAA,GAAA;AACA,EAAA,MAAA,GAAA,GAAA,aAAA,EAAA,CAAA;AACA,EAAA,OAAA,CAAA,CAAA,GAAA,CAAA,SAAA,EAAA,CAAA;AACA,CAAA;AACA;AACA;AACA,SAAA,IAAA,CAAA,OAAA,EAAA;AACA,EAAA,aAAA,CAAA,OAAA,EAAA,CAAA,OAAA,EAAA,MAAA,CAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA,qBAAA,EAAA,EAAA;AACA,IAAA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,yBAAA,CAAA,CAAA;AACA;AACA,IAAA,OAAA;AACA,GAAA;AACA;AACA,EAAA,gBAAA,EAAA,CAAA;AACA;AACA,EAAAA,MAAA,CAAA,OAAA,EAAA,CAAA;AACA;AACA,EAAA,cAAA,CAAA,KAAA,IAAA;AACA,IAAA,KAAA,CAAA,MAAA,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;AACA,GAAA,CAAA,CAAA;AACA;;;;"}