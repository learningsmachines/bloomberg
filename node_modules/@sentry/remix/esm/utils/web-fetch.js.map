{"version":3,"file":"web-fetch.js","sources":["../../../src/utils/web-fetch.ts"],"sourcesContent":["// Based on Remix's implementation of Fetch API\n// https://github.com/remix-run/web-std-io/blob/d2a003fe92096aaf97ab2a618b74875ccaadc280/packages/fetch/\n// The MIT License (MIT)\n\n// Copyright (c) 2016 - 2020 Node Fetch Team\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport { logger } from '@sentry/utils';\n\nimport { getClientIPAddress } from './vendor/getIpAddress';\nimport type { RemixRequest } from './vendor/types';\n\n/*\n * Symbol extractor utility to be able to access internal fields of Remix requests.\n */\nconst getInternalSymbols = (\n  request: Record<string, unknown>,\n): {\n  bodyInternalsSymbol: string;\n  requestInternalsSymbol: string;\n} => {\n  const symbols = Object.getOwnPropertySymbols(request);\n  return {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    bodyInternalsSymbol: symbols.find(symbol => symbol.toString().includes('Body internals')) as any,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    requestInternalsSymbol: symbols.find(symbol => symbol.toString().includes('Request internals')) as any,\n  };\n};\n\n/**\n * Vendored from:\n * https://github.com/remix-run/web-std-io/blob/f715b354c8c5b8edc550c5442dec5712705e25e7/packages/fetch/src/utils/get-search.js#L5\n */\nexport const getSearch = (parsedURL: URL): string => {\n  if (parsedURL.search) {\n    return parsedURL.search;\n  }\n\n  const lastOffset = parsedURL.href.length - 1;\n  const hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');\n  return parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';\n};\n\n/**\n * Convert a Request to Node.js http request options.\n * The options object to be passed to http.request\n * Vendored / modified from:\n * https://github.com/remix-run/web-std-io/blob/f715b354c8c5b8edc550c5442dec5712705e25e7/packages/fetch/src/request.js#L259\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const normalizeRemixRequest = (request: RemixRequest): Record<string, any> => {\n  const { requestInternalsSymbol, bodyInternalsSymbol } = getInternalSymbols(request);\n\n  if (!requestInternalsSymbol) {\n    throw new Error('Could not find request internals symbol');\n  }\n\n  const { parsedURL } = request[requestInternalsSymbol];\n  const headers = new Headers(request[requestInternalsSymbol].headers);\n\n  // Fetch step 1.3\n  if (!headers.has('Accept')) {\n    headers.set('Accept', '*/*');\n  }\n\n  // HTTP-network-or-cache fetch steps 2.4-2.7\n  let contentLengthValue = null;\n  if (request.body === null && /^(post|put)$/i.test(request.method)) {\n    contentLengthValue = '0';\n  }\n\n  if (request.body !== null) {\n    const totalBytes = request[bodyInternalsSymbol].size;\n    // Set Content-Length if totalBytes is a number (that is not NaN)\n    if (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {\n      contentLengthValue = String(totalBytes);\n    }\n  }\n\n  if (contentLengthValue) {\n    headers.set('Content-Length', contentLengthValue);\n  }\n\n  // HTTP-network-or-cache fetch step 2.11\n  if (!headers.has('User-Agent')) {\n    headers.set('User-Agent', 'node-fetch');\n  }\n\n  // HTTP-network-or-cache fetch step 2.15\n  if (request.compress && !headers.has('Accept-Encoding')) {\n    headers.set('Accept-Encoding', 'gzip,deflate,br');\n  }\n\n  let { agent } = request;\n\n  if (typeof agent === 'function') {\n    agent = agent(parsedURL);\n  }\n\n  if (!headers.has('Connection') && !agent) {\n    headers.set('Connection', 'close');\n  }\n\n  let ip;\n\n  // Using a try block here not to break the whole request if we can't get the IP address\n  try {\n    ip = getClientIPAddress(headers);\n  } catch (e) {\n    __DEBUG_BUILD__ && logger.warn('Could not get client IP address', e);\n  }\n\n  // HTTP-network fetch step 4.2\n  // chunked encoding is handled by Node.js\n  const search = getSearch(parsedURL);\n\n  // Manually spread the URL object instead of spread syntax\n  const requestOptions = {\n    path: parsedURL.pathname + search,\n    pathname: parsedURL.pathname,\n    hostname: parsedURL.hostname,\n    protocol: parsedURL.protocol,\n    port: parsedURL.port,\n    hash: parsedURL.hash,\n    search: parsedURL.search,\n    // @ts-expect-error - it does not has a query\n    query: parsedURL.query,\n    href: parsedURL.href,\n    method: request.method,\n    // @ts-expect-error - not sure what this supposed to do\n    headers: headers[Symbol.for('nodejs.util.inspect.custom')](),\n    insecureHTTPParser: request.insecureHTTPParser,\n    agent,\n\n    // [SENTRY] For compatibility with Sentry SDK RequestData parser, adding `originalUrl` property.\n    originalUrl: parsedURL.href,\n\n    // [SENTRY] Adding `ip` property if found inside headers.\n    ip,\n  };\n\n  return requestOptions;\n};\n"],"names":[],"mappings":"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"}