import { init as init$1, configureScope, getCurrentHub } from '@sentry/node';
export * from '@sentry/node';
export { DEFAULT_USER_INCLUDES, Handlers, Hub, Integrations, SDK_VERSION, Scope, addBreadcrumb, addGlobalEventProcessor, addRequestDataToEvent, autoDiscoverNodePerformanceMonitoringIntegrations, captureCheckIn, captureEvent, captureException, captureMessage, close, configureScope, createTransport, deepReadDirSync, defaultIntegrations, defaultStackParser, extractRequestData, extractTraceparentData, flush, getActiveTransaction, getCurrentHub, getHubFromCarrier, getSentryRelease, lastEventId, makeMain, makeNodeTransport, setContext, setExtra, setExtras, setTag, setTags, setUser, spanStatusfromHttpCode, startTransaction, trace, withMonitor, withScope } from '@sentry/node';
import { logger } from '@sentry/utils';
import { instrumentServer } from './utils/instrumentServer.js';
export { captureRemixServerException } from './utils/instrumentServer.js';
import { buildMetadata } from './utils/metadata.js';
export { ErrorBoundary, withErrorBoundary } from '@sentry/react';
export { remixRouterInstrumentation, withSentry } from './client/performance.js';
export { captureRemixErrorBoundaryError } from './client/errors.js';
export { wrapExpressCreateRequestHandler } from './utils/serverAdapters/express.js';

function sdkAlreadyInitialized() {
  const hub = getCurrentHub();
  return !!hub.getClient();
}

/** Initializes Sentry Remix SDK on Node. */
function init(options) {
  buildMetadata(options, ['remix', 'node']);

  if (sdkAlreadyInitialized()) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('SDK already initialized');

    return;
  }

  instrumentServer();

  init$1(options );

  configureScope(scope => {
    scope.setTag('runtime', 'node');
  });
}

export { init };
//# sourceMappingURL=index.server.js.map
