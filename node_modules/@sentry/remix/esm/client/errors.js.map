{"version":3,"file":"errors.js","sources":["../../../src/client/errors.tsx"],"sourcesContent":["import { captureException, withScope } from '@sentry/core';\nimport { addExceptionMechanism, isNodeEnv, isString } from '@sentry/utils';\n\nimport { isRouteErrorResponse } from '../utils/vendor/response';\n\n/**\n * Captures an error that is thrown inside a Remix ErrorBoundary.\n *\n * @param error The error to capture.\n * @returns void\n */\nexport function captureRemixErrorBoundaryError(error: unknown): string | undefined {\n  let eventId: string | undefined;\n  const isClientSideRuntimeError = !isNodeEnv() && error instanceof Error;\n  const isRemixErrorResponse = isRouteErrorResponse(error);\n  // Server-side errors apart from `ErrorResponse`s also appear here without their stacktraces.\n  // So, we only capture:\n  //    1. `ErrorResponse`s\n  //    2. Client-side runtime errors here,\n  //    And other server-side errors captured in `handleError` function where stacktraces are available.\n  if (isRemixErrorResponse || isClientSideRuntimeError) {\n    const eventData = isRemixErrorResponse\n      ? {\n          function: 'ErrorResponse',\n          ...error.data,\n        }\n      : {\n          function: 'ReactError',\n        };\n\n    withScope(scope => {\n      scope.addEventProcessor(event => {\n        addExceptionMechanism(event, {\n          type: 'instrument',\n          handled: false,\n          data: eventData,\n        });\n        return event;\n      });\n\n      if (isRemixErrorResponse) {\n        if (isString(error.data)) {\n          eventId = captureException(error.data);\n        } else if (error.statusText) {\n          eventId = captureException(error.statusText);\n        } else {\n          eventId = captureException(error);\n        }\n      } else {\n        eventId = captureException(error);\n      }\n    });\n  }\n\n  return eventId;\n}\n"],"names":[],"mappings":";;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,8BAAA,CAAA,KAAA,EAAA;AACA,EAAA,IAAA,OAAA,CAAA;AACA,EAAA,MAAA,wBAAA,GAAA,CAAA,SAAA,EAAA,IAAA,KAAA,YAAA,KAAA,CAAA;AACA,EAAA,MAAA,oBAAA,GAAA,oBAAA,CAAA,KAAA,CAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA,EAAA,IAAA,oBAAA,IAAA,wBAAA,EAAA;AACA,IAAA,MAAA,SAAA,GAAA,oBAAA;AACA,QAAA;AACA,UAAA,QAAA,EAAA,eAAA;AACA,UAAA,GAAA,KAAA,CAAA,IAAA;AACA,SAAA;AACA,QAAA;AACA,UAAA,QAAA,EAAA,YAAA;AACA,SAAA,CAAA;AACA;AACA,IAAA,SAAA,CAAA,KAAA,IAAA;AACA,MAAA,KAAA,CAAA,iBAAA,CAAA,KAAA,IAAA;AACA,QAAA,qBAAA,CAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,YAAA;AACA,UAAA,OAAA,EAAA,KAAA;AACA,UAAA,IAAA,EAAA,SAAA;AACA,SAAA,CAAA,CAAA;AACA,QAAA,OAAA,KAAA,CAAA;AACA,OAAA,CAAA,CAAA;AACA;AACA,MAAA,IAAA,oBAAA,EAAA;AACA,QAAA,IAAA,QAAA,CAAA,KAAA,CAAA,IAAA,CAAA,EAAA;AACA,UAAA,OAAA,GAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA;AACA,SAAA,MAAA,IAAA,KAAA,CAAA,UAAA,EAAA;AACA,UAAA,OAAA,GAAA,gBAAA,CAAA,KAAA,CAAA,UAAA,CAAA,CAAA;AACA,SAAA,MAAA;AACA,UAAA,OAAA,GAAA,gBAAA,CAAA,KAAA,CAAA,CAAA;AACA,SAAA;AACA,OAAA,MAAA;AACA,QAAA,OAAA,GAAA,gBAAA,CAAA,KAAA,CAAA,CAAA;AACA,OAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,OAAA,OAAA,CAAA;AACA;;;;"}