Object.defineProperty(exports, '__esModule', { value: true });

const node = require('@sentry/node');
const utils = require('@sentry/utils');
const instrumentServer = require('./utils/instrumentServer.js');
const metadata = require('./utils/metadata.js');
const react = require('@sentry/react');
const performance = require('./client/performance.js');
const errors = require('./client/errors.js');
const express = require('./utils/serverAdapters/express.js');

function sdkAlreadyInitialized() {
  const hub = node.getCurrentHub();
  return !!hub.getClient();
}

/** Initializes Sentry Remix SDK on Node. */
function init(options) {
  metadata.buildMetadata(options, ['remix', 'node']);

  if (sdkAlreadyInitialized()) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('SDK already initialized');

    return;
  }

  instrumentServer.instrumentServer();

  node.init(options );

  node.configureScope(scope => {
    scope.setTag('runtime', 'node');
  });
}

exports.DEFAULT_USER_INCLUDES = node.DEFAULT_USER_INCLUDES;
exports.Handlers = node.Handlers;
exports.Hub = node.Hub;
exports.Integrations = node.Integrations;
exports.SDK_VERSION = node.SDK_VERSION;
exports.Scope = node.Scope;
exports.addBreadcrumb = node.addBreadcrumb;
exports.addGlobalEventProcessor = node.addGlobalEventProcessor;
exports.addRequestDataToEvent = node.addRequestDataToEvent;
exports.autoDiscoverNodePerformanceMonitoringIntegrations = node.autoDiscoverNodePerformanceMonitoringIntegrations;
exports.captureCheckIn = node.captureCheckIn;
exports.captureEvent = node.captureEvent;
exports.captureException = node.captureException;
exports.captureMessage = node.captureMessage;
exports.close = node.close;
exports.configureScope = node.configureScope;
exports.createTransport = node.createTransport;
exports.deepReadDirSync = node.deepReadDirSync;
exports.defaultIntegrations = node.defaultIntegrations;
exports.defaultStackParser = node.defaultStackParser;
exports.extractRequestData = node.extractRequestData;
exports.extractTraceparentData = node.extractTraceparentData;
exports.flush = node.flush;
exports.getActiveTransaction = node.getActiveTransaction;
exports.getCurrentHub = node.getCurrentHub;
exports.getHubFromCarrier = node.getHubFromCarrier;
exports.getSentryRelease = node.getSentryRelease;
exports.lastEventId = node.lastEventId;
exports.makeMain = node.makeMain;
exports.makeNodeTransport = node.makeNodeTransport;
exports.setContext = node.setContext;
exports.setExtra = node.setExtra;
exports.setExtras = node.setExtras;
exports.setTag = node.setTag;
exports.setTags = node.setTags;
exports.setUser = node.setUser;
exports.spanStatusfromHttpCode = node.spanStatusfromHttpCode;
exports.startTransaction = node.startTransaction;
exports.trace = node.trace;
exports.withMonitor = node.withMonitor;
exports.withScope = node.withScope;
exports.captureRemixServerException = instrumentServer.captureRemixServerException;
exports.ErrorBoundary = react.ErrorBoundary;
exports.withErrorBoundary = react.withErrorBoundary;
exports.remixRouterInstrumentation = performance.remixRouterInstrumentation;
exports.withSentry = performance.withSentry;
exports.captureRemixErrorBoundaryError = errors.captureRemixErrorBoundaryError;
exports.wrapExpressCreateRequestHandler = express.wrapExpressCreateRequestHandler;
exports.init = init;
for (const k in node) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) exports[k] = node[k];
}
//# sourceMappingURL=index.server.js.map
