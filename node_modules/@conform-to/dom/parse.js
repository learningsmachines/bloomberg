'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var formdata = require('./formdata.js');
var intent = require('./intent.js');

var VALIDATION_UNDEFINED = '__undefined__';
var VALIDATION_SKIPPED = '__skipped__';
function parse(payload, options) {
  var submission = {
    intent: intent.getIntent(payload),
    payload: formdata.resolve(payload, {
      ignoreKeys: [intent.INTENT]
    }),
    error: {}
  };
  var intent$1 = intent.parseIntent(submission.intent);
  if (intent$1 && intent$1.type === 'list') {
    formdata.setValue(submission.payload, intent$1.payload.name, list => {
      if (typeof list !== 'undefined' && !Array.isArray(list)) {
        throw new Error('The list intent can only be applied to a list');
      }
      return intent.updateList(list !== null && list !== void 0 ? list : [], intent$1.payload);
    });
  }
  if (typeof (options === null || options === void 0 ? void 0 : options.resolve) === 'undefined') {
    return submission;
  }
  var result = options.resolve(submission.payload, submission.intent);
  var mergeResolveResult = resolved => {
    return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, submission), resolved);
  };
  if (result instanceof Promise) {
    return result.then(mergeResolveResult);
  }
  return mergeResolveResult(result);
}

exports.VALIDATION_SKIPPED = VALIDATION_SKIPPED;
exports.VALIDATION_UNDEFINED = VALIDATION_UNDEFINED;
exports.parse = parse;
