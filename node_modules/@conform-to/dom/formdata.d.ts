/**
 * A ponyfill-like helper to get the form data with the submitter value.
 * It does not respect the tree order nor handles the image input.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData#parameters
 */
export declare function getFormData(form: HTMLFormElement, submitter?: HTMLInputElement | HTMLButtonElement | null): FormData;
/**
 * Returns the paths from a name based on the JS syntax convention
 * @example
 * ```js
 * const paths = getPaths('todos[0].content'); // ['todos', 0, 'content']
 * ```
 */
export declare function getPaths(name: string): Array<string | number>;
/**
 * Returns a formatted name from the paths based on the JS syntax convention
 * @example
 * ```js
 * const name = formatPaths(['todos', 0, 'content']); // "todos[0].content"
 * ```
 */
export declare function formatPaths(paths: Array<string | number>): string;
/**
 * Assign a value to a target object by following the paths on the name
 */
export declare function setValue(target: Record<string, any>, name: string, valueFn: (prev?: unknown) => any): void;
/**
 * Resolves the payload into a plain object based on the JS syntax convention
 */
export declare function resolve(payload: FormData | URLSearchParams, options?: {
    ignoreKeys?: string[];
}): {};
/**
 * Format the error messages into a validation message
 */
export declare function getValidationMessage(errors?: string[]): string;
/**
 * Retrieve the error messages from the validation message
 */
export declare function getErrors(validationMessage: string | undefined): string[];
