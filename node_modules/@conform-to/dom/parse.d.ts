export type Submission<Schema = any> = {
    intent: string;
    payload: Record<string, unknown>;
    error: Record<string, string[]>;
    value?: Schema | null;
};
export declare const VALIDATION_UNDEFINED = "__undefined__";
export declare const VALIDATION_SKIPPED = "__skipped__";
export declare function parse(payload: FormData | URLSearchParams): Submission;
export declare function parse<Schema>(payload: FormData | URLSearchParams, options?: {
    resolve?: (payload: Record<string, any>, intent: string) => {
        value?: Schema;
        error?: Record<string, string[]>;
    };
}): Submission<Schema>;
export declare function parse<Schema>(payload: FormData | URLSearchParams, options?: {
    resolve?: (payload: Record<string, any>, intent: string) => Promise<{
        value?: Schema;
        error?: Record<string, string[]>;
    }>;
}): Promise<Submission<Schema>>;
export declare function parse<Schema>(payload: FormData | URLSearchParams, options?: {
    resolve?: (payload: Record<string, any>, intent: string) => {
        value?: Schema;
        error?: Record<string, string[]>;
    } | Promise<{
        value?: Schema;
        error?: Record<string, string[]>;
    }>;
}): Submission<Schema> | Promise<Submission<Schema>>;
