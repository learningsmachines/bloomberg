/**
 * A type guard to check if the provided reference is a form control element, including
 * `input`, `select`, `textarea` or `button`
 */
function isFormControl(element) {
  return element instanceof Element && (element.tagName === 'INPUT' || element.tagName === 'SELECT' || element.tagName === 'TEXTAREA' || element.tagName === 'BUTTON');
}

/**
 * A type guard to check if the provided reference is a focusable form control element.
 */
function isFocusableFormControl(element) {
  return isFormControl(element) && element.willValidate && element.type !== 'submit';
}

/**
 * Resolves the form action based on the submit event
 */
function getFormAction(event) {
  var _ref, _submitter$getAttribu;
  var form = event.target;
  var submitter = event.submitter;
  return (_ref = (_submitter$getAttribu = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute('formaction')) !== null && _submitter$getAttribu !== void 0 ? _submitter$getAttribu : form.getAttribute('action')) !== null && _ref !== void 0 ? _ref : "".concat(location.pathname).concat(location.search);
}

/**
 * Resolves the form encoding type based on the submit event
 */
function getFormEncType(event) {
  var _submitter$getAttribu2;
  var form = event.target;
  var submitter = event.submitter;
  var encType = (_submitter$getAttribu2 = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute('formenctype')) !== null && _submitter$getAttribu2 !== void 0 ? _submitter$getAttribu2 : form.enctype;
  if (encType === 'multipart/form-data') {
    return encType;
  }
  return 'application/x-www-form-urlencoded';
}

/**
 * Resolves the form method based on the submit event
 */
function getFormMethod(event) {
  var _submitter$getAttribu3;
  var form = event.target;
  var submitter = event.submitter;
  var method = (_submitter$getAttribu3 = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute('formmethod')) !== null && _submitter$getAttribu3 !== void 0 ? _submitter$getAttribu3 : form.getAttribute('method');
  switch (method) {
    case 'post':
    case 'put':
    case 'patch':
    case 'delete':
      return method;
  }
  return 'get';
}

/**
 * Resolve the form element
 */
function getFormElement(element) {
  var _element$form;
  return element instanceof HTMLFormElement ? element : (_element$form = element === null || element === void 0 ? void 0 : element.form) !== null && _element$form !== void 0 ? _element$form : null;
}

/**
 * Returns a list of form control elements in the form
 */
function getFormControls(form) {
  return Array.from(form.elements).filter(isFormControl);
}

/**
 * A function to create a submitter button element
 */
function createSubmitter(config) {
  var button = document.createElement('button');
  button.name = config.name;
  button.value = config.value;
  if (config.hidden) {
    button.hidden = true;
  }
  if (config.formAction) {
    button.formAction = config.formAction;
  }
  if (config.formEnctype) {
    button.formEnctype = config.formEnctype;
  }
  if (config.formMethod) {
    button.formMethod = config.formMethod;
  }
  if (config.formNoValidate) {
    button.formNoValidate = true;
  }
  return button;
}

/**
 * Trigger form submission with a submitter.
 */
function requestSubmit(form, submitter) {
  var shouldRemoveSubmitter = false;
  if (submitter && !submitter.isConnected) {
    shouldRemoveSubmitter = true;
    form.appendChild(submitter);
  }
  if (typeof form.requestSubmit === 'function') {
    form.requestSubmit(submitter);
  } else {
    var event = new SubmitEvent('submit', {
      bubbles: true,
      cancelable: true,
      submitter
    });
    form.dispatchEvent(event);
  }
  if (submitter && shouldRemoveSubmitter) {
    form.removeChild(submitter);
  }
}

/**
 * Focus on the first invalid form control in the form
 */
function focusFirstInvalidControl(form) {
  for (var element of form.elements) {
    if (isFocusableFormControl(element) && !element.validity.valid) {
      element.focus();
      break;
    }
  }
}

export { createSubmitter, focusFirstInvalidControl, getFormAction, getFormControls, getFormElement, getFormEncType, getFormMethod, isFocusableFormControl, isFormControl, requestSubmit };
