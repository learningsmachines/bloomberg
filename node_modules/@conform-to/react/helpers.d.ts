import { INTENT, VALIDATION_UNDEFINED, VALIDATION_SKIPPED } from '@conform-to/dom';
import type { FieldConfig, Primitive } from './hooks.js';
import type { CSSProperties, HTMLInputTypeAttribute } from 'react';
interface FormElementProps {
    id?: string;
    name: string;
    form?: string;
    'aria-describedby'?: string;
    'aria-invalid'?: boolean;
}
interface FormControlProps extends FormElementProps {
    required?: boolean;
    autoFocus?: boolean;
    tabIndex?: number;
    style?: CSSProperties;
    'aria-hidden'?: boolean;
}
interface InputProps<Schema> extends FormControlProps {
    type?: HTMLInputTypeAttribute;
    minLength?: number;
    maxLength?: number;
    min?: Schema extends number ? number : string | number;
    max?: Schema extends number ? number : string | number;
    step?: Schema extends number ? number : string | number;
    pattern?: string;
    multiple?: boolean;
    value?: string;
    defaultChecked?: boolean;
    defaultValue?: string;
}
interface SelectProps extends FormControlProps {
    defaultValue?: string | number | readonly string[] | undefined;
    multiple?: boolean;
}
interface TextareaProps extends FormControlProps {
    minLength?: number;
    maxLength?: number;
    defaultValue?: string;
}
type BaseOptions = {
    ariaAttributes?: true;
    description?: boolean;
} | {
    ariaAttributes: false;
};
type ControlOptions = BaseOptions & {
    hidden?: boolean;
};
type InputOptions = ControlOptions & ({
    type: 'checkbox' | 'radio';
    value?: string;
} | {
    type?: Exclude<HTMLInputTypeAttribute, 'button' | 'submit' | 'hidden'>;
    value?: never;
});
export declare const hiddenProps: {
    style: CSSProperties;
    tabIndex: number;
    'aria-hidden': boolean;
};
export declare function input<Schema extends Primitive | unknown>(config: FieldConfig<Schema>, options?: InputOptions): InputProps<Schema>;
export declare function input<Schema extends File | File[]>(config: FieldConfig<Schema>, options: InputOptions & {
    type: 'file';
}): InputProps<Schema>;
export declare function select<Schema extends Primitive | Primitive[] | undefined | unknown>(config: FieldConfig<Schema>, options?: ControlOptions): SelectProps;
export declare function textarea<Schema extends Primitive | undefined | unknown>(config: FieldConfig<Schema>, options?: ControlOptions): TextareaProps;
export declare function fieldset<Schema extends Record<string, unknown> | undefined | unknown>(config: FieldConfig<Schema>, options?: BaseOptions): FormControlProps;
export declare function collection<Schema extends Array<string | boolean> | string | boolean | undefined | unknown>(config: FieldConfig<Schema>, options: BaseOptions & {
    type: 'checkbox' | 'radio';
    options: string[];
}): Array<InputProps<Schema> & Pick<Required<InputProps<Schema>>, 'type' | 'value'>>;
export { INTENT, VALIDATION_UNDEFINED, VALIDATION_SKIPPED };
