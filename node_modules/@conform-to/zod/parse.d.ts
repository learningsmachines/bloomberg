import { type Submission } from '@conform-to/dom';
import { type output, type RefinementCtx, type ZodCustomIssue, type ZodTypeAny, type ZodErrorMap, type IssueData } from 'zod';
export declare function parse<Schema extends ZodTypeAny>(payload: FormData | URLSearchParams, config: {
    schema: Schema | ((intent: string) => Schema);
    async?: false;
    errorMap?: ZodErrorMap;
}): Submission<output<Schema>>;
export declare function parse<Schema extends ZodTypeAny>(payload: FormData | URLSearchParams, config: {
    schema: Schema | ((intent: string) => Schema);
    async: true;
    errorMap?: ZodErrorMap;
}): Promise<Submission<output<Schema>>>;
/**
 * A helper function to define a custom constraint on a superRefine check.
 * Mainly used for async validation.
 *
 * @see https://conform.guide/api/zod#refine
 */
export declare function refine(ctx: RefinementCtx, options: {
    /**
     * A validate function. If the function returns `undefined`,
     * it will fallback to server validation.
     */
    validate: () => boolean | Promise<boolean> | undefined;
    /**
     * Define when the validation should be run. If the value is `false`,
     * the validation will be skipped.
     */
    when?: boolean;
    /**
     * The message displayed when the validation fails.
     */
    message?: string;
    /**
     * The path set to the zod issue.
     */
    path?: IssueData['path'];
    /**
     * Custom parameters
     */
    params?: ZodCustomIssue['params'];
}): void | Promise<void>;
