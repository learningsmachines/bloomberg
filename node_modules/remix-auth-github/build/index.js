"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitHubStrategy = exports.GitHubStrategyScopeSeperator = exports.GitHubStrategyDefaultScope = exports.GitHubStrategyDefaultName = void 0;
const remix_auth_1 = require("remix-auth");
const remix_auth_oauth2_1 = require("remix-auth-oauth2");
exports.GitHubStrategyDefaultName = "github";
exports.GitHubStrategyDefaultScope = "user:email";
exports.GitHubStrategyScopeSeperator = " ";
class GitHubStrategy extends remix_auth_oauth2_1.OAuth2Strategy {
    constructor({ clientID, clientSecret, callbackURL, scope, allowSignup, userAgent, userInfoURL = "https://api.github.com/user", userEmailsURL = "https://api.github.com/user/emails", authorizationURL = "https://github.com/login/oauth/authorize", tokenURL = "https://github.com/login/oauth/access_token", }, verify) {
        super({
            clientID,
            clientSecret,
            callbackURL,
            authorizationURL,
            tokenURL,
        }, verify);
        this.name = exports.GitHubStrategyDefaultName;
        this.scope = this.getScope(scope);
        this.allowSignup = allowSignup !== null && allowSignup !== void 0 ? allowSignup : true;
        this.userAgent = userAgent !== null && userAgent !== void 0 ? userAgent : "Remix Auth";
        this.userInfoURL = userInfoURL;
        this.userEmailsURL = userEmailsURL;
    }
    //Allow users the option to pass a scope string, or typed array
    getScope(scope) {
        if (!scope) {
            return [exports.GitHubStrategyDefaultScope];
        }
        else if (typeof scope === "string") {
            return scope.split(exports.GitHubStrategyScopeSeperator);
        }
        return scope;
    }
    authorizationParams() {
        return new URLSearchParams({
            scope: this.scope.join(exports.GitHubStrategyScopeSeperator),
            allow_signup: String(this.allowSignup),
        });
    }
    async userEmails(accessToken) {
        let response = await fetch(this.userEmailsURL, {
            headers: {
                Accept: "application/vnd.github.v3+json",
                Authorization: `token ${accessToken}`,
                "User-Agent": this.userAgent,
            },
        });
        let data = await response.json();
        let emails = data
            .filter(({ verified }) => verified) // Filter out unverified emails
            // Sort to keep the primary email first
            .sort((a, b) => {
            if (a.primary && !b.primary)
                return -1;
            if (!a.primary && b.primary)
                return 1;
            return 0;
        })
            .map(({ email }) => ({ value: email }));
        return emails;
    }
    async userProfile(accessToken) {
        let response = await fetch(this.userInfoURL, {
            headers: {
                Accept: "application/vnd.github.v3+json",
                Authorization: `token ${accessToken}`,
                "User-Agent": this.userAgent,
            },
        });
        let data = await response.json();
        let emails = [{ value: data.email }];
        if (this.scope.includes(exports.GitHubStrategyDefaultScope)) {
            emails = await this.userEmails(accessToken);
        }
        let profile = {
            provider: "github",
            displayName: data.login,
            id: data.id.toString(),
            name: {
                familyName: data.name,
                givenName: data.name,
                middleName: data.name,
            },
            emails: emails,
            photos: [{ value: data.avatar_url }],
            _json: data,
        };
        return profile;
    }
    async getAccessToken(response) {
        var _a;
        let data = new URLSearchParams(await response.text());
        let accessToken = data.get("access_token");
        if (!accessToken)
            throw new remix_auth_1.AuthorizationError("Missing access token.");
        let tokenType = data.get("token_type");
        if (!tokenType)
            throw new remix_auth_1.AuthorizationError("Missing token type.");
        let refreshToken = (_a = data.get("refresh_token")) !== null && _a !== void 0 ? _a : "";
        let accessTokenExpiresIn = parseExpiresIn(data.get("expires_in"));
        let refreshTokenExpiresIn = parseExpiresIn(data.get("refresh_token_expires_in"));
        return {
            accessToken,
            refreshToken,
            extraParams: {
                tokenType,
                accessTokenExpiresIn,
                refreshTokenExpiresIn,
            },
        };
    }
}
exports.GitHubStrategy = GitHubStrategy;
function parseExpiresIn(value) {
    if (!value)
        return null;
    try {
        return Number.parseInt(value, 10);
    }
    catch {
        return null;
    }
}
