(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
  (global = global || self, factory(global.spinDelay = {}, global.react));
}(this, (function (exports, react) {
  const defaultOptions = {
    delay: 500,
    minDuration: 200
  };
  function useSpinDelay(loading, options) {
    options = Object.assign({}, defaultOptions, options);
    const [state, setState] = react.useState('IDLE');
    const timeout = react.useRef(null);
    react.useEffect(() => {
      if (loading && state === 'IDLE') {
        clearTimeout(timeout.current);
        timeout.current = setTimeout(() => {
          if (!loading) {
            return setState('IDLE');
          }

          timeout.current = setTimeout(() => {
            setState('EXPIRE');
          }, options.minDuration);
          setState('DISPLAY');
        }, options.delay);
        setState('DELAY');
      }

      if (!loading && state !== 'DISPLAY') {
        clearTimeout(timeout.current);
        setState('IDLE');
      }
    }, [loading, state, options.delay, options.minDuration]);
    react.useEffect(() => {
      return () => clearTimeout(timeout.current);
    }, []);
    return state === 'DISPLAY' || state === 'EXPIRE';
  }

  exports.default = useSpinDelay;
  exports.defaultOptions = defaultOptions;
  exports.useSpinDelay = useSpinDelay;

})));
//# sourceMappingURL=index.js.map
