"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/remix/remixShim.js
var require_remixShim = __commonJS({
  "src/remix/remixShim.js"(exports, module2) {
    "use strict";
    var remixDevPackage = require("@remix-run/dev/package.json");
    var semver = require("semver");
    var specifierBase = semver.lt(remixDevPackage.version, "1.6.2") ? "@remix-run/dev" : "@remix-run/dev/dist";
    var { readConfig: readConfig2 } = require(`${specifierBase}/config`);
    var { formatRoutesAsJson } = require(`${specifierBase}/config/format`);
    module2.exports = { readConfig: readConfig2, formatRoutesAsJson };
  }
});

// src/readConfigWorker.ts
var import_synckit = require("synckit");
var import_remixShim = __toESM(require_remixShim());
(0, import_synckit.runAsWorker)(async (projectPath) => {
  process.env.NODE_ENV = "test";
  for (const key in require.cache) {
    if (key.startsWith(projectPath))
      delete require.cache[key];
  }
  const { routes, appDirectory } = await (0, import_remixShim.readConfig)(projectPath);
  return { routes, appDirectory };
});
