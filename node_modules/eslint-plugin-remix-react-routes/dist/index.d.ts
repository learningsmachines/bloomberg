import * as _typescript_eslint_types_dist_generated_ast_spec from '@typescript-eslint/types/dist/generated/ast-spec';
import * as _typescript_eslint_utils_dist_ts_eslint_Rule from '@typescript-eslint/utils/dist/ts-eslint/Rule';
import { SharedConfigurationSettings } from '@typescript-eslint/utils/dist/ts-eslint';

declare const rules: {
    "no-relative-paths": _typescript_eslint_utils_dist_ts_eslint_Rule.RuleModule<"relativePath" | "ambiguousPath", [{
        enforceInRouteComponents?: boolean | undefined;
        allowLinksToSelf?: boolean | undefined;
    }], _typescript_eslint_utils_dist_ts_eslint_Rule.RuleListener>;
    "no-urls": _typescript_eslint_utils_dist_ts_eslint_Rule.RuleModule<"urlAsPath", never[], {
        JSXElement(node: _typescript_eslint_types_dist_generated_ast_spec.JSXElement): void;
    }>;
    "require-valid-paths": _typescript_eslint_utils_dist_ts_eslint_Rule.RuleModule<"invalidPath" | "indeterminatePath", [], _typescript_eslint_utils_dist_ts_eslint_Rule.RuleListener>;
    "use-link-for-routes": _typescript_eslint_utils_dist_ts_eslint_Rule.RuleModule<"anchorForRoute" | "indeterminateUrl", [], _typescript_eslint_utils_dist_ts_eslint_Rule.RuleListener>;
};

type JsonFormattedRoute = {
    id: string;
    index?: boolean;
    path?: string;
    caseSensitive?: boolean;
    file: string;
    children?: JsonFormattedRoute[];
};

type RemixAppConfig = {
    appDirectory: string;
    routes: JsonFormattedRoute[];
};
type RemixContext = {
    appConfig?: RemixAppConfig;
    currentRoutePath?: string;
    validateRoute: (routePath: string) => boolean;
};

declare const recommended: {
    readonly plugins: readonly ["remix-react-routes"];
    readonly rules: {
        readonly "remix-react-routes/use-link-for-routes": "error";
        readonly "remix-react-routes/require-valid-paths": "error";
        readonly "remix-react-routes/no-relative-paths": "error";
        readonly "remix-react-routes/no-urls": "error";
    };
};

declare const strict: {
    readonly plugins: readonly ["remix-react-routes"];
    readonly rules: {
        readonly "remix-react-routes/use-link-for-routes": "error";
        readonly "remix-react-routes/require-valid-paths": "error";
        readonly "remix-react-routes/no-relative-paths": readonly ["error", {
            readonly enforceInRouteComponents: true;
        }];
        readonly "remix-react-routes/no-urls": "error";
    };
    readonly settings: SharedConfigurationSettings;
};

declare module "@typescript-eslint/utils/dist/ts-eslint" {
    interface SharedConfigurationSettings {
        remixReactRoutes?: {
            /** If true, paths/URLs that cannot be statically determined will be reported by no-relative-paths/use-link-for-routes */
            strictMode?: boolean;
            mockRemixContext?: Partial<RemixContext>;
        };
    }
}

declare const index_recommended: typeof recommended;
declare const index_strict: typeof strict;
declare namespace index {
  export {
    index_recommended as recommended,
    index_strict as strict,
  };
}

export { index as configs, rules };
