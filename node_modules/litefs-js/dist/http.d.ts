/// <reference types="node" />
import type http from 'http';
/**
 * If the current instance is the primary instance, then returns false.
 * Otherwise, this will set the response status code to 409 and the
 * fly-replay header to the primary instance. It will also end the response.
 * @param {http.ServerResponse} res the http response object
 * @returns {Promise<boolean>} whether the request was replayed
 * @example
 * import { ensurePrimary } from "litefs-js/http";
 * ...
 * const replayed = await ensurePrimary(res);
 * if (replayed) return;
 * ...
 */
export declare function ensurePrimary(res: http.ServerResponse): Promise<boolean>;
/**
 * Sets a cookie on the response object that will be used to ensure
 * transactional consistency.
 *
 * **NOTE**: It's very important that you do this *after* mutations to the
 * database, otherwise you'll be setting the cookie to a value that is
 * out of date.
 *
 * @param {http.ServerResponse} res the http response object
 * @example
 * import { setTxCookie } from "litefs-js/http";
 * ...
 * setTxCookie(res);
 * ...
 * @returns {Promise<void>}
 */
export declare function setTxCookie(res: http.ServerResponse): Promise<void>;
/**
 * Deletes the cookie that is used to ensure transactional consistency.
 * @param {http.ServerResponse} res the http response object
 * @example
 * import { deleteTxCookie } from "litefs-js/http";
 * ...
 * await deleteTxCookie(res);
 * ...
 * @returns {Promise<void>}
 */
export declare function deleteTxCookie(res: http.ServerResponse): Promise<void>;
export declare function appendHeader(res: http.ServerResponse, name: string, value: string): void;
/**
 * Ensures that the transactional consistency cookie is set on the response object.
 * If the current instance is the primary instance, then the cookie will be deleted.
 * If the current instance is not the primary instance, then the cookie will be
 * deleted if the transaction number in the cookie is up to date. If the transaction
 * number in the cookie is not up to date, then the response will be replayed from
 * the primary instance.
 * @param {http.IncomingMessage} req the http request object
 * @param {http.ServerResponse} res the http response object
 * @example
 * import { handleTransactionalConsistency } from "litefs-js/http";
 * ...
 * const replayed = await handleTransactionalConsistency(req, res);
 * if (replayed) return;
 * ...
 * @returns {Promise<boolean>} - whether the response was replayed
 */
export declare function handleTransactionalConsistency(req: http.IncomingMessage, res: http.ServerResponse): Promise<boolean>;
