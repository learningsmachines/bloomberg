"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnsurePrimaryMiddleware = exports.getSetTxNumberMiddleware = exports.getTransactionalConsistencyMiddleware = void 0;
const _1 = require(".");
const http_1 = require("./http");
__exportStar(require("./http"), exports);
/**
 * This is an express middleware that will ensure that if the client has a
 * transaction number cookie, then the server will wait until the transaction
 * number is up to date before continuing. If it takes too long, then it will
 * instead reply to the primary instance.
 *
 * This should be used in conjunction with the `getSetTxNumberMiddleware` middleware.
 *
 * This should be applied to your app before any database reads or writes.
 * @returns {RequestHandler} the middleware
 */
function getTransactionalConsistencyMiddleware() {
    return async (req, res, next) => {
        const replayed = await (0, http_1.handleTransactionalConsistency)(req, res);
        if (replayed)
            return;
        next();
    };
}
exports.getTransactionalConsistencyMiddleware = getTransactionalConsistencyMiddleware;
/**
 * This is an express middleware that will set the transaction number cookie on
 * the response object if the current instance is the primary instance.
 *
 * This should be used in conjunction with the `getTransactionalConsistencyMiddleware` middleware.
 *
 * This should be applied to your app after all database reads or writes.
 *
 * @returns {RequestHandler} the middleware
 */
function getSetTxNumberMiddleware() {
    const methods = ['POST', 'PUT', 'PATCH', 'DELETE'];
    return async (req, res, next) => {
        if (methods.includes(req.method)) {
            const { currentIsPrimary } = await (0, _1.getInstanceInfo)();
            if (currentIsPrimary)
                await (0, http_1.setTxCookie)(res);
        }
        next();
    };
}
exports.getSetTxNumberMiddleware = getSetTxNumberMiddleware;
/**
 * This ensures that POST, PUT, PATCH, and DELETE requests are replayed to the
 * primary instance if the current instance is not the primary instance to avoid
 * writing to a non-primary database.
 *
 * @returns {RequestHandler} the middleware
 */
function getEnsurePrimaryMiddleware() {
    const methods = ['POST', 'PUT', 'PATCH', 'DELETE'];
    return async (req, res, next) => {
        if (methods.includes(req.method)) {
            const replayed = await (0, http_1.ensurePrimary)(res);
            if (replayed)
                return;
        }
        next();
    };
}
exports.getEnsurePrimaryMiddleware = getEnsurePrimaryMiddleware;
