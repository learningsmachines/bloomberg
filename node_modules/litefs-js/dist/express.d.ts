import type { RequestHandler } from 'express';
export * from './http';
/**
 * This is an express middleware that will ensure that if the client has a
 * transaction number cookie, then the server will wait until the transaction
 * number is up to date before continuing. If it takes too long, then it will
 * instead reply to the primary instance.
 *
 * This should be used in conjunction with the `getSetTxNumberMiddleware` middleware.
 *
 * This should be applied to your app before any database reads or writes.
 * @returns {RequestHandler} the middleware
 */
export declare function getTransactionalConsistencyMiddleware(): RequestHandler;
/**
 * This is an express middleware that will set the transaction number cookie on
 * the response object if the current instance is the primary instance.
 *
 * This should be used in conjunction with the `getTransactionalConsistencyMiddleware` middleware.
 *
 * This should be applied to your app after all database reads or writes.
 *
 * @returns {RequestHandler} the middleware
 */
export declare function getSetTxNumberMiddleware(): RequestHandler;
/**
 * This ensures that POST, PUT, PATCH, and DELETE requests are replayed to the
 * primary instance if the current instance is not the primary instance to avoid
 * writing to a non-primary database.
 *
 * @returns {RequestHandler} the middleware
 */
export declare function getEnsurePrimaryMiddleware(): RequestHandler;
