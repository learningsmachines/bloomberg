{"version":3,"file":"intl-parse-accept-language.esm.js","sources":["../src/index.ts"],"sourcesContent":["export type Options = {\n  /**\n   * A validate callback that is called for each `locale`. If the `locale` is valid, return the `locale` as a string.\n   * Otherwise return `undefined`, `null`, or an empty Array.\n   * Should the callback throw an error, the error will be caught and the `locale` will be ignored.\n   */\n  validate?: (locale: string) => string | string[] | null | undefined;\n\n  /**\n   * If set to `true`, the wildcard locale `*` will be returned in the array.\n   * If set to `false`, the wildcard locale `*` will be ignored.\n   * Defaults to `true`.\n   */\n  ignoreWildcard?: boolean;\n};\n\nconst defaultValidate = (locale: string) => locale;\n\nexport const parseAcceptLanguage = (\n  /** The value from the `Accept-Language` header.\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language\n   */\n  languageHeaderValue: string | null | undefined,\n  options: Options = {}\n): string[] => {\n  if (!languageHeaderValue) return [];\n  const { ignoreWildcard = true, validate = defaultValidate } = options;\n\n  return languageHeaderValue\n    .split(',')\n    .map((lang): [number, string] => {\n      const [locale, q = 'q=1'] = lang.split(';');\n      const trimmedLocale = locale.trim();\n      const numQ = Number(q.replace(/q ?=/, ''));\n      if (isNaN(numQ)) return [0, trimmedLocale];\n      return [numQ, trimmedLocale];\n    })\n    .sort(([q1], [q2]) => q2 - q1)\n    .flatMap(([_, locale]) => {\n      if (locale === '*' && ignoreWildcard) return [];\n      try {\n        return validate(locale) || [];\n        // return Intl.DateTimeFormat.supportedLocalesOf(locale);\n      } catch {\n        return [];\n      }\n    });\n};\n"],"names":["defaultValidate","locale","parseAcceptLanguage","languageHeaderValue","options","ignoreWildcard","validate","split","map","lang","q","trimmedLocale","trim","numQ","Number","replace","isNaN","sort","q1","q2","flatMap"],"mappings":"AAgBA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD;AAAA,SAAoBA,MAApB;AAAA,CAAxB;;IAEaC,mBAAmB,GAAG,SAAtBA,mBAAsB;AACjC;;;AAGAC,mBAJiC,EAKjCC,OALiC;MAKjCA;AAAAA,IAAAA,UAAmB;;;AAEnB,MAAI,CAACD,mBAAL,EAA0B,OAAO,EAAP;AAC1B,iBAA8DC,OAA9D;AAAA,uCAAQC,cAAR;AAAA,MAAQA,cAAR,sCAAyB,IAAzB;AAAA,mCAA+BC,QAA/B;AAAA,MAA+BA,QAA/B,kCAA0CN,eAA1C;AAEA,SAAOG,mBAAmB,CACvBI,KADI,CACE,GADF,EAEJC,GAFI,CAEA,UAACC,IAAD;AACH,sBAA4BA,IAAI,CAACF,KAAL,CAAW,GAAX,CAA5B;AAAA,QAAON,MAAP;AAAA;AAAA,QAAeS,CAAf,6BAAmB,KAAnB;;AACA,QAAMC,aAAa,GAAGV,MAAM,CAACW,IAAP,EAAtB;AACA,QAAMC,IAAI,GAAGC,MAAM,CAACJ,CAAC,CAACK,OAAF,CAAU,MAAV,EAAkB,EAAlB,CAAD,CAAnB;AACA,QAAIC,KAAK,CAACH,IAAD,CAAT,EAAiB,OAAO,CAAC,CAAD,EAAIF,aAAJ,CAAP;AACjB,WAAO,CAACE,IAAD,EAAOF,aAAP,CAAP;AACD,GARI,EASJM,IATI,CASC;AAAA,QAAEC,EAAF;AAAA,QAAQC,EAAR;AAAA,WAAgBA,EAAE,GAAGD,EAArB;AAAA,GATD,EAUJE,OAVI,CAUI;QAAKnB;AACZ,QAAIA,MAAM,KAAK,GAAX,IAAkBI,cAAtB,EAAsC,OAAO,EAAP;;AACtC,QAAI;AACF,aAAOC,QAAQ,CAACL,MAAD,CAAR,IAAoB,EAA3B,CADE;AAGH,KAHD,CAGE,gBAAM;AACN,aAAO,EAAP;AACD;AACF,GAlBI,CAAP;AAmBD;;;;"}